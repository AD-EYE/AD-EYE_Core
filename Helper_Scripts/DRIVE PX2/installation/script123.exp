#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Mon Feb 10 06:47:50 2020
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 1 

if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don
set timeout -1
set user [lindex $argv 0]
set userpswrd [lindex $argv 1]
set gituser [lindex $argv 2]
set gitpswrd [lindex $argv 3]


if {$argc != 4} {
  puts "Wrong number of arguments provided"
  puts "Usage: ./script123 User Password GitUser GitPassword"
  exit 1
}

spawn ./adeye123.sh
match_max 100000


expect -exact "\[sudo\] password for $user: "
send -- "$userpswrd\r"
expect -exact "Do you want to continue? \[Y/n\] "
send -- "y\r"
expect -exact "Accept this solution? \[Y/n/q/?\] "
send -- "q\r"
expect -exact "Accept this solution? \[Y/n/q/?\] "
send -- "n\r"
expect -exact "Accept this solution? \[Y/n/q/?\] "
send -- "y\r"
expect -exact "Do you want to continue? \[Y/n/?\] "
send -- "y\r"
expect -exact "Do you want to continue? \[Y/n\] "
send -- "y\r"
expect -exact "Do you want to continue? \[Y/n\] "
send -- "y\r"
expect -exact "Do you want to continue? \[Y/n\] "
send -- "y\r"
expect -exact "Do you want to continue? \[Y/n\] "
send -- "y\r"



#The_expect_ below_is_an_extra_for_finishing_script
#It_should_be_replaceable_by_the_interact_above
#expect -exact "Do you want to continue? \[Y/n\] "
#send -- "y\r"
# expect eof

expect -exact "Username for 'https://gits-15.sys.kth.se': "
send -- "$gituser\r"
expect -exact "Password for 'https://$gituser@gits-15.sys.kth.se': "
send -- "$gitpswrd\r"
expect -exact "Username for 'https://gits-15.sys.kth.se': "
send -- "$gituser\r"
expect -exact "Password for 'https://$gituser@gits-15.sys.kth.se': "
send -- "$gitpswrd\r"
expect -exact "Username for 'https://gits-15.sys.kth.se': "
send -- "$gituser\r"
expect -exact "Password for 'https://$gituser@gits-15.sys.kth.se': "
send -- "$gitpswrd\r"
expect -exact "Username for 'https://gits-15.sys.kth.se': "
send -- "$gituser\r"
expect -exact "Password for 'https://$gituser@gits-15.sys.kth.se': "
send -- "$gitpswrd\r"
expect -exact "Username for 'https://gits-15.sys.kth.se': "
send -- "$gituser\r"
expect -exact "Password for 'https://$gituser@gits-15.sys.kth.se': "
send -- "$gitpswrd\r"
expect -exact "Username for 'https://gits-15.sys.kth.se': "
send -- "$gituser\r"
expect -exact "Password for 'https://$gituser@gits-15.sys.kth.se': "
send -- "$gitpswrd\r"
expect -exact "Username for 'https://gits-15.sys.kth.se': "
send -- "$gituser\r"
expect -exact "Password for 'https://$gituser@gits-15.sys.kth.se': "
send -- "$gitpswrd\r"
expect -exact "Username for 'https://gits-15.sys.kth.se': "
send -- "$gituser\r"
expect -exact "Password for 'https://$gituser@gits-15.sys.kth.se': "
send -- "$gitpswrd\r"
expect -exact "Username for 'https://gits-15.sys.kth.se': "
send -- "$gituser\r"
expect -exact "Password for 'https://$gituser@gits-15.sys.kth.se': "
send -- "$gitpswrd\r"
expect -exact "Username for 'https://gits-15.sys.kth.se': "
send -- "$gituser\r"
expect -exact "Password for 'https://$gituser@gits-15.sys.kth.se': "
send -- "$gitpswrd\r"
expect -exact "Username for 'https://gits-15.sys.kth.se': "
send -- "$gituser\r"
expect -exact "Password for 'https://$gituser@gits-15.sys.kth.se': "
send -- "$gitpswrd\r"
expect -exact "Username for 'https://gits-15.sys.kth.se': "
send -- "$gituser\r"
expect -exact "Password for 'https://$gituser@gits-15.sys.kth.se': "
send -- "$gitpswrd\r"
expect -exact "Username for 'https://gits-15.sys.kth.se': "
send -- "$gituser\r"
expect -exact "Password for 'https://$gituser@gits-15.sys.kth.se': "
send -- "$gitpswrd\r"
#expect -exact "\[sudo\] password for $user: "
#send -- "$userpswrd\r" #THIS_IS_WHERE_THE_SCRIPT_DIES
expect -exact "\[sudo\] password for $user: "
send -- "$userpswrd\r"

expect -exact "\[sudo\] password for $user: "
send -- "$userpswrd\r"
expect -exact "Do you want to continue? \[Y/n\] "
send -- "y\r"
expect -exact "Do you want to continue? \[Y/n\] "
send -- "y\r"
expect -exact "Do you want to continue? \[Y/n\] "
send -- "y\r"
interact
