<!-- -->
<launch>

    <!-- base_link to traffic_light_camera tf -->
    <node pkg="tf" type="static_transform_publisher" name="base_link_to_tl_camera"
          args="1.1 -0.7 1.8 -0.3706 0.483 -0.6294 0.483 base_link tl_camera 10"/>

    <!-- base_link to radar tf -->
    <node pkg="tf" type="static_transform_publisher" name="base_link_to_radar"
          args="3.75 0.0 0.4 0.0 0.0 0.0 1.0 base_link radar 10"/>

    <!-- lidar_euclidean_cluster_detect -->
    <include file="$(find adeye)/launch/lidar_euclidean_cluster_detect.launch" ns="detection/lidar">
        <arg name="points_node" value="/points_raw"/><!--CHANGE THIS TO READ WHETHER FROM VSCAN OR POINTS_RAW -->
        <arg name="remove_ground" value="true"/>
        <arg name="downsample_cloud" value="true"/> <!-- Apply VoxelGrid Filter with the value given by "leaf_size"-->
        <arg name="leaf_size" value="0.2"/><!-- Voxel Grid Filter leaf size-->
        <arg name="cluster_size_min" value="7"/><!-- Minimum number of points to consider a cluster as valid-->
        <arg name="cluster_size_max" value="100000"/><!-- Maximum number of points to allow inside a cluster-->
        <arg name="sync" value="false"/>
        <arg name="use_diffnormals" value="false"/>
        <arg name="pose_estimation" value="true"/>
        <arg name="clip_min_height" value="-1.5"/>
        <arg name="clip_max_height" value="0.5"/>

        <arg name="keep_lanes" value="false"/>
        <arg name="keep_lane_left_distance" value="5"/>
        <arg name="keep_lane_right_distance" value="5"/>
        <arg name="max_boundingbox_side" value="10"/>
        <arg name="cluster_merge_threshold" value="1.5"/>
        <arg name="clustering_distance" value="0.75"/>

        <arg name="use_vector_map" value="false"/>
        <arg name="wayarea_gridmap_layer" value="wayarea"/>

        <arg name="output_frame" value="velodyne"/>

        <arg name="remove_points_upto" value="0.0"/>

        <arg name="use_gpu" value="true"/>

        <arg name="use_multiple_thres" value="false"/>
        <arg name="clustering_ranges" value="[15,30,45,60]"/><!-- Distances to segment pointcloud -->
        <arg name="clustering_distances"
             value="[0.5,1.1,1.6,2.1,2.6]"/><!-- Euclidean Clustering threshold distance for each segment -->
    </include>

    <!-- imm_ukf_pda_track -->
    <node pkg="imm_ukf_pda_track" type="imm_ukf_pda" name="imm_ukf_pda" output="screen" ns="detection/lidar">

        <remap from="/detection/fusion_tools/objects"         to="/detection/lidar/detected_objects" />
        <remap from="/detection/objects"       to="/detection/lidar/tracked_objects" />

        <param name="gating_thres" value="9.22"/>
        <param name="gate_probability" value="0.99"/>
        <param name="detection_probability" value="0.9"/>
        <param name="life_time_thres" value="8"/>
        <param name="static_velocity_thres" value="0.5"/>
        <param name="static_num_history_thres" value="3"/>
        <param name="prevent_explosion_thres" value="1000"/>
        <param name="lane_direction_chi_thres" value="2.71"/>
        <param name="nearest_lane_distance_thres" value="1.0"/>
        <param name="tracking_frame" value="/world"/>
        <param name="lane_frame" value="/map"/>
        <param name="use_sukf" value="use_sukf"/>
        <param name="use_vectormap" value="false"/>

    </node>

    <!-- imm_ukf_pda_track visualizer -->
    <node pkg="detected_objects_visualizer" type="visualize_detected_objects" name="tracked_objects_visualizer" output="screen" ns="detection/lidar">
        <param name="objects_src_topic" value="/tracked_objects"/>
        <remap from="objects_markers"       to="tracked_objects_markers" />
    </node>


    <!-- radar_broadcaster -->
    <include file="$(find adeye)/launch/radar_broadcaster.launch"/>

    <!-- objectsFrameAdapter -->
    <include file="$(find adeye)/launch/objectsFrameAdapter.launch" ns="detection/radar">
        <arg name="nodeName" value="radarObjectsFrameAdapter"/>
        <arg name="inputTopic" value="objects_radar_frame"/>
        <arg name="outputTopic" value="objects_velodyne_frame"/>
        <arg name="targetFrame" value="velodyne"/>
    </include>

    <!-- lidar_radar_fusion -->
    <include file="$(find adeye)/launch/lidarRadarFuse.launch" ns="detection">
        <arg name="nodeName" value="lidarRadarFuse"/>
        <arg name="lidar_topic" value="lidar/tracked_objects"/>
        <arg name="radar_topic" value="radar/objects_velodyne_frame"/>
        <arg name="fused_topic" value="lidar_radar_fusion/objects"/>
    </include>

    <!-- camera_setup for camera_1-->
    <include file="$(find adeye)/launch/camera_setup.launch">
        <arg name="camera" value="camera_1"/>
        <arg name="tf_x" value="2.0"/>
        <arg name="tf_y" value="0.0"/>
        <arg name="tf_z" value="1.32"/>
        <arg name="tf_qx" value="-0.5"/>
        <arg name="tf_qy" value="0.5"/>
        <arg name="tf_qz" value="-0.5"/>
        <arg name="tf_qw" value="0.5"/>
    </include>

    <!-- camera_setup for camera_2-->
    <include file="$(find adeye)/launch/camera_setup.launch">
        <arg name="camera" value="camera_2"/>
        <arg name="tf_x" value="-0.95"/>
        <arg name="tf_y" value="0.0"/>
        <arg name="tf_z" value="1.32"/>
        <arg name="tf_qx" value="-0.5"/>
        <arg name="tf_qy" value="-0.5"/>
        <arg name="tf_qz" value="0.5"/>
        <arg name="tf_qw" value="0.5"/>
    </include>

    <!-- Two_cameras_fusion -->
    <include file="$(find adeye)/launch/cameraObjectListFuse.launch">
        <arg name="nodeName" value="cameraObjectsListFuse"/>
        <arg name="inputTopic1" value="camera_1/fusion/objects"/>
        <arg name="inputTopic2" value="camera_2/fusion/objects"/>
        <arg name="outputTopic" value="fusion/objects"/>
    </include>

    <!-- detected_objects_visualizer -->
    <node pkg="detected_objects_visualizer" type="visualize_detected_objects" name="detected_objects_visualizer" ns="detection" output="screen">
      <param name="objects_src_topic" value="/fusion/objects"/>
    </node>

    <!-- objectsFrameAdapter -->
    <include file="$(find adeye)/launch/objectsFrameAdapter.launch" ns="detection">
        <arg name="nodeName" value="objectsFrameAdapter"/>
        <arg name="inputTopic" value="fusion/objects"/>
        <arg name="outputTopic" value="objects_map_frame"/>
        <arg name="targetFrame" value="map"/>
    </include>


    <!-- traffic_light_camera_info -->
    <include file="$(find adeye)/launch/camera_info_publisher.launch" ns="detection/tl_camera">
        <arg name="node_name" value="traffic_light_camera_info_publisher"/>
        <arg name="args_list" value="camera_info tl_camera 720 960 0.0 0.0 0.0 0.0 0.0 1125 0.0 480 0.0 1125 360 0.0 0.0 1.0 1.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0 1125 0.0 480 0.0 0.0 1125 360 0.0 0.0 0.0 1.0 0.0"/>
    </include>

    <!-- feat_proj -->
    <include file="$(find trafficlight_recognizer)/launch/feat_proj.launch" ns="detection/tl_camera">
        <arg name="camera_id" value="/tl_camera"/>
        <arg name="camera_info_src" value="/camera_info"/>
        <arg name="use_path_info" value="false"/> <!-- USE VectorMap Server to publish only TrafficSignals on current lane-->
    </include>

    <!-- traffic_light_recognition -->
    <include file="$(find trafficlight_recognizer)/launch/traffic_light_recognition.launch" ns="detection/tl_camera">
        <arg name="camera_id" default="/"/>
        <arg name="image_src" default="/sensor/tl/image_raw"/>
        <arg name="light_src" default="/light_color" />
        <arg name="camera_light_src" default="/camera_light_color" />
        <arg name="ams_light_src" default="/ams_light_color" />
    </include>

</launch>
