<!-- -->
<launch>

    <arg name="world_name" value="W01_Base_Map"/>


    <rosparam>
        use_pex_file: false
    </rosparam>
    <arg name="use_ground_truth_dynamic_objects" default="false"/> <!-- if the moving obstacles are obtained through a ground truth topic or should be from perception-->

    <group unless="$(arg use_ground_truth_dynamic_objects)"> <!-- if we do not use ground truth from dynamic object then we need the safety channel perception-->
        <rosparam>
            use_ground_truth_dynamic_objects: false
        </rosparam>
        <include file="$(find adeye)/launch/safety_channel_perception.launch"/>
    </group>
    <group if="$(arg use_ground_truth_dynamic_objects)"> <!-- if we use ground truth from dynamic object then the pose of other vehicle is gotten fron a topic-->
        <rosparam>
            use_ground_truth_dynamic_objects: true
        </rosparam>
    </group>


    <node ns="safety_channel"
        type="fake_localizer.py"
        pkg="adeye"
        name="SSMP_ground_truth_localizer"
        args="SSMP_ground_truth_localizer SSMP_map SSMP_base_link"/>

    <node ns="safety_channel" pkg="tf" type="static_transform_publisher" name="world_to_SSMP_map"
        args="0 0 0 0 0 0 /world SSMP_map 10"/>


    <arg name="Vector_Map_Folder" value="$(find adeye)/../../../Experiments/$(arg world_name)/Vector_Map_Files/"/>
    <arg name="Pex_Folder" value="$(find adeye)/../../../Experiments/$(arg world_name)/Simulation/"/>
    <arg name="area_width" value="35" />
    <arg name="area_height_front" value="50" />
    <arg name="area_height_back" value="25" />

    <node pkg="adeye" type="GridMapCreator" name="GridMapCreator" output="screen"
        args="$(arg area_width) $(arg area_height_front) $(arg area_height_back)">
        <param name="filePoint" value="$(arg Vector_Map_Folder)point.csv"/>
        <param name="fileLane" value="$(arg Vector_Map_Folder)lane.csv"/>
        <param name="fileNode" value="$(arg Vector_Map_Folder)node.csv"/>
        <param name="fileDtlane" value="$(arg Vector_Map_Folder)dtlane.csv"/>
        <param name="filePex" value="$(arg Pex_Folder)$(arg world_name).pex"/>
    </node>

    <node pkg="adeye" type="flattening" name="flattening" output="screen"
        args="$(arg area_width) $(arg area_height_front) $(arg area_height_back)"/>


    <rosparam param="critical_nodes_level_one">["/voxel_grid_filter"]</rosparam>
    <rosparam param="critical_nodes_level_two">["/camera_2/vision_ssd_detect"]</rosparam>
    <rosparam param="critical_nodes_level_three">["/camera_1/vision_ssd_detect"]</rosparam>
    <rosparam param="critical_nodes_level_four">["/pure_pursuit", "/twist_filter", "/twist_gate", "/sender", "/controlSwitch"]</rosparam>
    <node pkg="adeye"
          type="safetySupervisor"
          name="safetySupervisor"
          output="screen"
          launch-prefix="xterm -e"
          args="/pure_pursuit /twist_filter /twist_gate /sender /controlSwitch"/>

    <node pkg="ss_trajplanner"
          type="ss_trajplanner_node"
          name="ss_trajplanner_node"
          output="screen"
          launch-prefix="xterm -e"
          >
        <param name="trajectory_set_filename"
               value="$(find ss_trajplanner)/data/SSMP_trajectories/SSMPset_2018-1-3--11-58-48.csv"/>
        <param name="costmap_base_topic" value="/costmap_base"/>
        <remap from="/costmap_base/costmap" to="/safety_planner_occmap"/>
        <remap from="/costmap_base/footprint" to="/SSMP_ego_footprint"/>
    </node>


</launch>
