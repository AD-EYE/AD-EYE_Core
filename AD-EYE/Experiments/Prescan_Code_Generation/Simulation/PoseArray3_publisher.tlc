%% File : PoseArray3_publisher.tlc
%% Created : Tue Feb 16 22:38:25 2021
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "PoseArray3_publisher.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  PoseArray3_publisher "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs

    #ifdef __cplusplus
    extern "C" {
    #endif

    extern void PoseArray3_publisher_Start_wrapper(void **pW,
			const int8_T *topic, const int_T p_width0,
			const int8_T *message_type, const int_T p_width1,
			const real_T *port, const int_T p_width2,
			const real_T *timeout, const int_T p_width3);

    extern void PoseArray3_publisher_Outputs_wrapper(const uint32_T *seq,
			const uint8_T *frameId,
			const uint32_T *frameId_length,
			const real_T *positionX,
			const real_T *positionY,
			const real_T *positionZ,
			const real_T *orientationW,
			const real_T *orientationX,
			const real_T *orientationY,
			const real_T *orientationZ,
			const uint32_T *poses_length,
			const uint32_T *seq1,
			const uint8_T *frameId1,
			const uint32_T *frameId_length1,
			const real_T *positionX1,
			const real_T *positionY1,
			const real_T *positionZ1,
			const real_T *orientationW1,
			const real_T *orientationX1,
			const real_T *orientationY1,
			const real_T *orientationZ1,
			const uint32_T *poses_length1,
			const uint32_T *seq2,
			const uint8_T *frameId2,
			const uint32_T *frameId_length2,
			const real_T *positionX2,
			const real_T *positionY2,
			const real_T *positionZ2,
			const real_T *orientationW2,
			const real_T *orientationX2,
			const real_T *orientationY2,
			const real_T *orientationZ2,
			const uint32_T *poses_length2,
			void **pW,
			const int8_T *topic, const int_T p_width0,
			const int8_T *message_type, const int_T p_width1,
			const real_T *port, const int_T p_width2,
			const real_T *timeout, const int_T p_width3);

    extern void PoseArray3_publisher_Terminate_wrapper(void **pW,
			const int8_T *topic, const int_T p_width0,
			const int8_T *message_type, const int_T p_width1,
			const real_T *port, const int_T p_width2,
			const real_T *timeout, const int_T p_width3);

    #ifdef __cplusplus
    }
    #endif
  %closefile externs
  %<LibCacheExtern(externs)>
  %%
%endfunction


%% Function: Start ============================================================
%%
%function Start(block, system) Output
   /* %<Type> Block: %<Name> */
  %assign ppw = LibBlockDWorkAddr(PWORK, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
    %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else
    %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
    %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
  %else
    %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif
  PoseArray3_publisher_Start_wrapper(%<ppw>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>);
%endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign ppw = LibBlockDWorkAddr(PWORK, "", "", 0)
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign pu3 = LibBlockInputSignalAddr(3, "", "", 0)
  %assign pu4 = LibBlockInputSignalAddr(4, "", "", 0)
  %assign pu5 = LibBlockInputSignalAddr(5, "", "", 0)
  %assign pu6 = LibBlockInputSignalAddr(6, "", "", 0)
  %assign pu7 = LibBlockInputSignalAddr(7, "", "", 0)
  %assign pu8 = LibBlockInputSignalAddr(8, "", "", 0)
  %assign pu9 = LibBlockInputSignalAddr(9, "", "", 0)
  %assign pu10 = LibBlockInputSignalAddr(10, "", "", 0)
  %assign pu11 = LibBlockInputSignalAddr(11, "", "", 0)
  %assign pu12 = LibBlockInputSignalAddr(12, "", "", 0)
  %assign pu13 = LibBlockInputSignalAddr(13, "", "", 0)
  %assign pu14 = LibBlockInputSignalAddr(14, "", "", 0)
  %assign pu15 = LibBlockInputSignalAddr(15, "", "", 0)
  %assign pu16 = LibBlockInputSignalAddr(16, "", "", 0)
  %assign pu17 = LibBlockInputSignalAddr(17, "", "", 0)
  %assign pu18 = LibBlockInputSignalAddr(18, "", "", 0)
  %assign pu19 = LibBlockInputSignalAddr(19, "", "", 0)
  %assign pu20 = LibBlockInputSignalAddr(20, "", "", 0)
  %assign pu21 = LibBlockInputSignalAddr(21, "", "", 0)
  %assign pu22 = LibBlockInputSignalAddr(22, "", "", 0)
  %assign pu23 = LibBlockInputSignalAddr(23, "", "", 0)
  %assign pu24 = LibBlockInputSignalAddr(24, "", "", 0)
  %assign pu25 = LibBlockInputSignalAddr(25, "", "", 0)
  %assign pu26 = LibBlockInputSignalAddr(26, "", "", 0)
  %assign pu27 = LibBlockInputSignalAddr(27, "", "", 0)
  %assign pu28 = LibBlockInputSignalAddr(28, "", "", 0)
  %assign pu29 = LibBlockInputSignalAddr(29, "", "", 0)
  %assign pu30 = LibBlockInputSignalAddr(30, "", "", 0)
  %assign pu31 = LibBlockInputSignalAddr(31, "", "", 0)
  %assign pu32 = LibBlockInputSignalAddr(32, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
    %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else
    %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
    %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
  %else
    %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif
  PoseArray3_publisher_Outputs_wrapper(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<pu4>, %<pu5>, %<pu6>, %<pu7>, %<pu8>, %<pu9>, %<pu10>, %<pu11>, %<pu12>, %<pu13>, %<pu14>, %<pu15>, %<pu16>, %<pu17>, %<pu18>, %<pu19>, %<pu20>, %<pu21>, %<pu22>, %<pu23>, %<pu24>, %<pu25>, %<pu26>, %<pu27>, %<pu28>, %<pu29>, %<pu30>, %<pu31>, %<pu32>, %<ppw>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>);
  %%
%endfunction

%% Function: Terminate ========================================================
%%
%function Terminate(block, system) Output
   /* %<Type> Block: %<Name> */
  %assign ppw = LibBlockDWorkAddr(PWORK, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
    %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else
    %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
    %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
  %else
    %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif
  PoseArray3_publisher_Terminate_wrapper(%<ppw>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>);
%endfunction

%% [EOF] PoseArray3_publisher.tlc

