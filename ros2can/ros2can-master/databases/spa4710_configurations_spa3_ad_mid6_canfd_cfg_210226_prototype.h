/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 38.0.2 Thu Apr 20 10:44:10 2023.
 */

#ifndef SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_H
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_CAN_NM_FR_FRAME_ID (0x50cu)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_FRAME_ID (0x17u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR02_FRAME_ID (0x48u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_FRAME_ID (0x103u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR04_FRAME_ID (0x15u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_FRAME_ID (0x20u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_FRAME_ID (0x31u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR07_FRAME_ID (0x7au)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_FRAME_ID (0x34u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR11_FRAME_ID (0x55u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_CAN_NM_FR_FRAME_ID (0x50au)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR01_FRAME_ID (0x100u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR03_FRAME_ID (0x41u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR04_FRAME_ID (0x90u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR14_FRAME_ID (0x26u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR19_FRAME_ID (0x110u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR20_FRAME_ID (0x116u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR21_FRAME_ID (0x119u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR22_FRAME_ID (0x11bu)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR23_FRAME_ID (0x11eu)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR24_FRAME_ID (0x121u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR25_FRAME_ID (0x124u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR26_FRAME_ID (0x127u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR27_FRAME_ID (0x128u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR28_FRAME_ID (0x50u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR29_FRAME_ID (0x300u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_TIME_SYNCH_FR_FRAME_ID (0x40u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_PROTOTYPE_MID6_CAN_FD_FR29_FRAME_ID (0x28u)

/* Frame lengths in bytes. */
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_CAN_NM_FR_LENGTH (8u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_LENGTH (8u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR02_LENGTH (8u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_LENGTH (16u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR04_LENGTH (8u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_LENGTH (16u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_LENGTH (64u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR07_LENGTH (8u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_LENGTH (20u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR11_LENGTH (20u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_CAN_NM_FR_LENGTH (8u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR01_LENGTH (8u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR03_LENGTH (64u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR04_LENGTH (8u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR14_LENGTH (16u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR19_LENGTH (48u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR20_LENGTH (64u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR21_LENGTH (64u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR22_LENGTH (64u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR23_LENGTH (64u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR24_LENGTH (64u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR25_LENGTH (64u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR26_LENGTH (64u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR27_LENGTH (64u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR28_LENGTH (16u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR29_LENGTH (8u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_TIME_SYNCH_FR_LENGTH (8u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_PROTOTYPE_MID6_CAN_FD_FR29_LENGTH (12u)

/* Extended or standard frame types. */
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_CAN_NM_FR_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR02_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR04_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR07_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR11_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_CAN_NM_FR_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR01_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR03_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR04_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR14_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR19_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR20_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR21_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR22_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR23_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR24_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR25_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR26_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR27_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR28_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR29_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_TIME_SYNCH_FR_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_PROTOTYPE_MID6_CAN_FD_FR29_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_CYCLE_TIME_MS (10u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR02_CYCLE_TIME_MS (10u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_CYCLE_TIME_MS (80u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR04_CYCLE_TIME_MS (5u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_CYCLE_TIME_MS (10u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_CYCLE_TIME_MS (10u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR07_CYCLE_TIME_MS (40u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_CYCLE_TIME_MS (10u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR11_CYCLE_TIME_MS (25u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR01_CYCLE_TIME_MS (65u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR03_CYCLE_TIME_MS (10u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR04_CYCLE_TIME_MS (60u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR14_CYCLE_TIME_MS (10u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR19_CYCLE_TIME_MS (90u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR20_CYCLE_TIME_MS (90u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR21_CYCLE_TIME_MS (90u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR22_CYCLE_TIME_MS (90u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR23_CYCLE_TIME_MS (90u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR24_CYCLE_TIME_MS (90u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR25_CYCLE_TIME_MS (90u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR26_CYCLE_TIME_MS (90u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR27_CYCLE_TIME_MS (90u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR28_CYCLE_TIME_MS (10u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR29_CYCLE_TIME_MS (290u)

/* Signal choices. */
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_STS_AD_STEER_STS_DEGRADED_LVL4_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_STS_AD_STEER_STS_DEGRADED_LVL3_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_STS_AD_STEER_STS_DEGRADED_LVL2_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_STS_AD_STEER_STS_DEGRADED_LVL1_CHOICE (3u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_STS_AD_STEER_STS_SYS_OK_CHOICE (4u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_PERF_AD_STEER_PERF_PERF_LVL0_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_PERF_AD_STEER_PERF_PERF_LVL1_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_PERF_AD_STEER_PERF_PERF_LVL2_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_PERF_AD_STEER_PERF_PERF_LVL3_CHOICE (3u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_PERF_AD_STEER_PERF_PERF_LVL4_CHOICE (4u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_PERF_AD_STEER_PERF_PERF_LVL5_CHOICE (5u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_PERF_AD_STEER_PERF_PERF_LVL6_CHOICE (6u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_PERF_AD_STEER_PERF_PERF_LVL7_CHOICE (7u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_PERF_AD_STEER_PERF_PERF_LVL8_CHOICE (8u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_PERF_AD_STEER_PERF_PERF_LVL9_CHOICE (9u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_PERF_AD_STEER_PERF_PERF_LVL10_CHOICE (10u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_PERF_AD_STEER_PERF_PERF_LVL11_CHOICE (11u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_PERF_AD_STEER_PERF_PERF_LVL12_CHOICE (12u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_PERF_AD_STEER_PERF_PERF_LVL13_CHOICE (13u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_PERF_AD_STEER_PERF_PERF_LVL14_CHOICE (14u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_PERF_AD_STEER_PERF_PERF_LVL15_CHOICE (15u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_PERF_AD_STEER_PERF_PERF_LVL16_CHOICE (16u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_PERF_AD_STEER_PERF_PERF_LVL17_CHOICE (17u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_PERF_AD_STEER_PERF_PERF_LVL18_CHOICE (18u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_PERF_AD_STEER_PERF_PERF_LVL19_CHOICE (19u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR01_AD_SEC_STEER_STS_SAFE_GROUP_AD_STEER_PERF_AD_STEER_PERF_PERF_LVL20_CHOICE (20u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR02_AD_SEC_MOT_TQ_ASIL_THRSHLD_EXCD_THRSHLD_EXCEEDED_ON_OFF1_OFF_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR02_AD_SEC_MOT_TQ_ASIL_THRSHLD_EXCD_THRSHLD_EXCEEDED_ON_OFF1_ON_CHOICE (1u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_SEC_STEER_MOT_TQ_STEER_MOT_TQ_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_SEC_STEER_MOT_TQ_STEER_MOT_TQ_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_SEC_STEER_MOT_TQ_STEER_MOT_TQ_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_SEC_STEER_MOT_TQ_STEER_MOT_TQ_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_SEC_POSE_MON_SAFE_SAFE_QF_SAFE_QF_UKWN_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_SEC_POSE_MON_SAFE_SAFE_QF_SAFE_QF_NO_INTGRTY_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_SEC_POSE_MON_SAFE_SAFE_QF_SAFE_QF_INTGRTY_CMPRMD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_SEC_POSE_MON_SAFE_SAFE_QF_SAFE_QF_DATA_INTGRTY_OK_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_SEC_WHL_LOCK_STS_DEGRADED_STS_WHL_LOCK_DEGRADED1_UKWN_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_SEC_WHL_LOCK_STS_DEGRADED_STS_WHL_LOCK_DEGRADED1_FULL_FCN_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_SEC_WHL_LOCK_STS_DEGRADED_STS_WHL_LOCK_DEGRADED1_DEGRADED_FCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_SEC_WHL_LOCK_STS_DEGRADED_STS_WHL_LOCK_DEGRADED1_NO_FCN_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_SEC_WHL_LOCK_STS_LOCK_STS_WHL_LOCK_STS1_UKWN_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_SEC_WHL_LOCK_STS_LOCK_STS_WHL_LOCK_STS1_ALL_WHLS_RELD_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_SEC_WHL_LOCK_STS_LOCK_STS_WHL_LOCK_STS1_FRNT_WHLS_LOCKD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_SEC_WHL_LOCK_STS_LOCK_STS_WHL_LOCK_STS1_RE_WHLS_LOCKD_CHOICE (3u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_SEC_WHL_LOCK_STS_LOCK_STS_WHL_LOCK_STS1_ALL_WHLS_LOCKD_CHOICE (4u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_SSMB_DEGRADED_SSMB_DEGRADED_SSMB_DEGRADED_SFTY_CRIT_FLT_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_SSMB_DEGRADED_SSMB_DEGRADED_SSMB_DEGRADED_SFTY_CRIT_LATENT_FLT_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_SSMB_DEGRADED_SSMB_DEGRADED_SSMB_DEGRADED_PSS_FLT_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_SSMB_DEGRADED_SSMB_DEGRADED_SSMB_DEGRADED_NON_SFTY_CRIT_FLT_CHOICE (3u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR03_SSMB_DEGRADED_SSMB_DEGRADED_SSMB_DEGRADED_NO_FLT_CHOICE (4u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_AD_SEC_WHL_AG_ESTIMD_GROUP_SAFE_QF1_QF1_DEV_OF_DATA_UNDEFD_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_AD_SEC_WHL_AG_ESTIMD_GROUP_SAFE_QF1_QF1_DATA_TMP_UNDEFD_AND_EVLN_IN_PROGS_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_AD_SEC_WHL_AG_ESTIMD_GROUP_SAFE_QF1_QF1_DEV_OF_DATA_NOT_WITHIN_RNG_ALLWD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_AD_SEC_WHL_AG_ESTIMD_GROUP_SAFE_QF1_QF1_DATA_CALCD_WITH_DEV_DEFD_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_SEC_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_FRNT_LE_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_SEC_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_FRNT_LE_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_SEC_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_FRNT_LE_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_SEC_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_FRNT_LE_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_SEC_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_FRNT_RI_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_SEC_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_FRNT_RI_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_SEC_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_FRNT_RI_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_SEC_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_FRNT_RI_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_SEC_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_RE_LE_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_SEC_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_RE_LE_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_SEC_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_RE_LE_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_SEC_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_RE_LE_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_SEC_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_RE_RI_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_SEC_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_RE_RI_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_SEC_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_RE_RI_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR05_SEC_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_RE_RI_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_A_LAT_DATA_RAW_SAFE_MIN_MAX_QF_SAFE_QF_UKWN_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_A_LAT_DATA_RAW_SAFE_MIN_MAX_QF_SAFE_QF_NO_INTGRTY_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_A_LAT_DATA_RAW_SAFE_MIN_MAX_QF_SAFE_QF_INTGRTY_CMPRMD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_A_LAT_DATA_RAW_SAFE_MIN_MAX_QF_SAFE_QF_DATA_INTGRTY_OK_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_A_LAT_DATA_RAW_SAFE_NOM_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_A_LAT_DATA_RAW_SAFE_NOM_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_A_LAT_DATA_RAW_SAFE_NOM_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_A_LAT_DATA_RAW_SAFE_NOM_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_A_LGT_DATA_RAW_SAFE_NOM_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_A_LGT_DATA_RAW_SAFE_NOM_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_A_LGT_DATA_RAW_SAFE_NOM_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_A_LGT_DATA_RAW_SAFE_NOM_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_A_LGT_DATA_RAW_SAFE_MIN_MAX_QF_SAFE_QF_UKWN_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_A_LGT_DATA_RAW_SAFE_MIN_MAX_QF_SAFE_QF_NO_INTGRTY_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_A_LGT_DATA_RAW_SAFE_MIN_MAX_QF_SAFE_QF_INTGRTY_CMPRMD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_A_LGT_DATA_RAW_SAFE_MIN_MAX_QF_SAFE_QF_DATA_INTGRTY_OK_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_WHL_ROT_DIR_RE_SAFE_LE_WHL_ROTL_DIR_STD1_UNDEFD_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_WHL_ROT_DIR_RE_SAFE_LE_WHL_ROTL_DIR_STD1_STAND_STILL_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_WHL_ROT_DIR_RE_SAFE_LE_WHL_ROTL_DIR_STD1_FWD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_WHL_ROT_DIR_RE_SAFE_LE_WHL_ROTL_DIR_STD1_BACKW_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_WHL_ROT_DIR_RE_SAFE_LE_QF_QF1_DEV_OF_DATA_UNDEFD_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_WHL_ROT_DIR_RE_SAFE_LE_QF_QF1_DATA_TMP_UNDEFD_AND_EVLN_IN_PROGS_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_WHL_ROT_DIR_RE_SAFE_LE_QF_QF1_DEV_OF_DATA_NOT_WITHIN_RNG_ALLWD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_WHL_ROT_DIR_RE_SAFE_LE_QF_QF1_DATA_CALCD_WITH_DEV_DEFD_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_WHL_ROT_DIR_RE_SAFE_RI_WHL_ROTL_DIR_STD1_UNDEFD_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_WHL_ROT_DIR_RE_SAFE_RI_WHL_ROTL_DIR_STD1_STAND_STILL_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_WHL_ROT_DIR_RE_SAFE_RI_WHL_ROTL_DIR_STD1_FWD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_WHL_ROT_DIR_RE_SAFE_RI_WHL_ROTL_DIR_STD1_BACKW_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_WHL_ROT_DIR_RE_SAFE_RI_QF_QF1_DEV_OF_DATA_UNDEFD_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_WHL_ROT_DIR_RE_SAFE_RI_QF_QF1_DATA_TMP_UNDEFD_AND_EVLN_IN_PROGS_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_WHL_ROT_DIR_RE_SAFE_RI_QF_QF1_DEV_OF_DATA_NOT_WITHIN_RNG_ALLWD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_WHL_ROT_DIR_RE_SAFE_RI_QF_QF1_DATA_CALCD_WITH_DEV_DEFD_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_AXLE_SLIP_STS_AND_REL_AG_FRNT_AXLE_SLIP_STS_ERR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_AXLE_SLIP_STS_AND_REL_AG_FRNT_AXLE_SLIP_STS_NO_INFO_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_AXLE_SLIP_STS_AND_REL_AG_FRNT_AXLE_SLIP_STS_NOT_SLIP_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_AXLE_SLIP_STS_AND_REL_AG_FRNT_AXLE_SLIP_STS_SLIP_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_AXLE_SLIP_STS_AND_REL_AG_RE_AXLE_SLIP_STS_ERR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_AXLE_SLIP_STS_AND_REL_AG_RE_AXLE_SLIP_STS_NO_INFO_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_AXLE_SLIP_STS_AND_REL_AG_RE_AXLE_SLIP_STS_NOT_SLIP_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_AXLE_SLIP_STS_AND_REL_AG_RE_AXLE_SLIP_STS_SLIP_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_AXLE_SLIP_STS_AND_REL_AG_REL_PITCH_QF_QLY2_FLT_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_AXLE_SLIP_STS_AND_REL_AG_REL_PITCH_QF_QLY2_NO_INFO_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_AXLE_SLIP_STS_AND_REL_AG_REL_PITCH_QF_QLY2_VLD_CHOICE (2u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_AXLE_SLIP_STS_AND_REL_AG_REL_ROL_QF_QLY2_FLT_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_AXLE_SLIP_STS_AND_REL_AG_REL_ROL_QF_QLY2_NO_INFO_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_AXLE_SLIP_STS_AND_REL_AG_REL_ROL_QF_QLY2_VLD_CHOICE (2u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_AXLE_SLIP_STS_AND_REL_AG_INTV_STS_INTV_STS_ERR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_AXLE_SLIP_STS_AND_REL_AG_INTV_STS_INTV_STS_NO_INFO_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_AXLE_SLIP_STS_AND_REL_AG_INTV_STS_INTV_STS_NO_INTV_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_AXLE_SLIP_STS_AND_REL_AG_INTV_STS_INTV_STS_INTV_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_V_LAT_SAFE_NOM_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_V_LAT_SAFE_NOM_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_V_LAT_SAFE_NOM_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_V_LAT_SAFE_NOM_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_V_LAT_SAFE_MIN_MAX_QF_SAFE_QF_UKWN_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_V_LAT_SAFE_MIN_MAX_QF_SAFE_QF_NO_INTGRTY_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_V_LAT_SAFE_MIN_MAX_QF_SAFE_QF_INTGRTY_CMPRMD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_V_LAT_SAFE_MIN_MAX_QF_SAFE_QF_DATA_INTGRTY_OK_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_YAW_RATE_SAFE_NOM_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_YAW_RATE_SAFE_NOM_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_YAW_RATE_SAFE_NOM_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_YAW_RATE_SAFE_NOM_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_YAW_RATE_SAFE_MIN_MAX_QF_SAFE_QF_UKWN_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_YAW_RATE_SAFE_MIN_MAX_QF_SAFE_QF_NO_INTGRTY_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_YAW_RATE_SAFE_MIN_MAX_QF_SAFE_QF_INTGRTY_CMPRMD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR06_SEC_YAW_RATE_SAFE_MIN_MAX_QF_SAFE_QF_DATA_INTGRTY_OK_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR07_SEC_VEH_SPD_GROUP_SAFE_MOV_DIR_MOV_DIR1_UKWN_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR07_SEC_VEH_SPD_GROUP_SAFE_MOV_DIR_MOV_DIR1_STANDSTILL_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR07_SEC_VEH_SPD_GROUP_SAFE_MOV_DIR_MOV_DIR1_NOT_STANDSTILL_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR07_SEC_VEH_SPD_GROUP_SAFE_MOV_DIR_MOV_DIR1_FWD_CHOICE (3u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR07_SEC_VEH_SPD_GROUP_SAFE_MOV_DIR_MOV_DIR1_RVS_CHOICE (4u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR07_SEC_VEH_SPD_GROUP_SAFE_MOV_DIR_MOV_DIR1_ERR_CHOICE (5u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR07_SEC_VEH_SPD_GROUP_SAFE_MIN_MAX_QF_SAFE_QF_UKWN_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR07_SEC_VEH_SPD_GROUP_SAFE_MIN_MAX_QF_SAFE_QF_NO_INTGRTY_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR07_SEC_VEH_SPD_GROUP_SAFE_MIN_MAX_QF_SAFE_QF_INTGRTY_CMPRMD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR07_SEC_VEH_SPD_GROUP_SAFE_MIN_MAX_QF_SAFE_QF_DATA_INTGRTY_OK_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR07_SEC_VEH_SPD_GROUP_SAFE_MOV_DIR_QF_SAFE_QF_UKWN_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR07_SEC_VEH_SPD_GROUP_SAFE_MOV_DIR_QF_SAFE_QF_NO_INTGRTY_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR07_SEC_VEH_SPD_GROUP_SAFE_MOV_DIR_QF_SAFE_QF_INTGRTY_CMPRMD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR07_SEC_VEH_SPD_GROUP_SAFE_MOV_DIR_QF_SAFE_QF_DATA_INTGRTY_OK_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR07_SEC_VEH_SPD_GROUP_SAFE_NOM_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR07_SEC_VEH_SPD_GROUP_SAFE_NOM_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR07_SEC_VEH_SPD_GROUP_SAFE_NOM_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR07_SEC_VEH_SPD_GROUP_SAFE_NOM_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_WHL_AG_SPD_FRNT_SAFE_RI_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_WHL_AG_SPD_FRNT_SAFE_RI_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_WHL_AG_SPD_FRNT_SAFE_RI_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_WHL_AG_SPD_FRNT_SAFE_RI_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_WHL_AG_SPD_FRNT_SAFE_LE_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_WHL_AG_SPD_FRNT_SAFE_LE_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_WHL_AG_SPD_FRNT_SAFE_LE_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_WHL_AG_SPD_FRNT_SAFE_LE_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_WHL_AG_SPD_RE_SAFE_RI_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_WHL_AG_SPD_RE_SAFE_RI_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_WHL_AG_SPD_RE_SAFE_RI_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_WHL_AG_SPD_RE_SAFE_RI_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_WHL_AG_SPD_RE_SAFE_LE_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_WHL_AG_SPD_RE_SAFE_LE_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_WHL_AG_SPD_RE_SAFE_LE_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_WHL_AG_SPD_RE_SAFE_LE_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_VEH_M_SAFE_NOM_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_VEH_M_SAFE_NOM_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_VEH_M_SAFE_NOM_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_VEH_M_SAFE_NOM_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_VEH_M_SAFE_SAFE_QF_SAFE_QF_UKWN_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_VEH_M_SAFE_SAFE_QF_SAFE_QF_NO_INTGRTY_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_VEH_M_SAFE_SAFE_QF_SAFE_QF_INTGRTY_CMPRMD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR08_SEC_VEH_M_SAFE_SAFE_QF_SAFE_QF_DATA_INTGRTY_OK_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR11_AD_SEC_SAFE_STOP_ACTV_GROUP_SAFE_PLATFORM_SAFE_STOP_ACTV_NO_YES1_NO_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_SSMB_MID6_CAN_FD_FR11_AD_SEC_SAFE_STOP_ACTV_GROUP_SAFE_PLATFORM_SAFE_STOP_ACTV_NO_YES1_YES_CHOICE (1u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR01_AD_SEC_SAFE_STOP_REQ_SAFE_SAFE_STOP_REQ_NO_YES1_NO_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR01_AD_SEC_SAFE_STOP_REQ_SAFE_SAFE_STOP_REQ_NO_YES1_YES_CHOICE (1u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR01_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_NOM_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR01_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_RESD_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR01_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_MNTN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR01_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_RESD1_CHOICE (3u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR01_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_CMPT_RTRN_CHOICE (4u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR01_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_RESD2_CHOICE (5u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR01_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_SS_CHOICE (6u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR01_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_RESD3_CHOICE (7u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR01_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_SS1_CHOICE (8u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR01_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_RESD4_CHOICE (9u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR01_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_VIMSS_CHOICE (10u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR01_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_SDS_FLT_MGR_STS_RDNT_RESD5_CHOICE (11u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR04_SEC_ROAD_GRADIENTL_FROM_AD_INCLN_CONF_QLY3_DE0_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR04_SEC_ROAD_GRADIENTL_FROM_AD_INCLN_CONF_QLY3_DE1_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR04_SEC_ROAD_GRADIENTL_FROM_AD_INCLN_CONF_QLY3_DE2_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR04_SEC_ROAD_GRADIENTL_FROM_AD_INCLN_CONF_QLY3_DE3_CHOICE (3u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR04_SEC_ROAD_GRADIENTL_FROM_AD_INCLN_CONF_QLY3_DE4_CHOICE (4u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR04_SEC_ROAD_GRADIENTL_FROM_AD_INCLN_CONF_QLY3_DE5_CHOICE (5u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR04_SEC_ROAD_GRADIENTL_FROM_AD_INCLN_CONF_QLY3_DE6_CHOICE (6u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR04_SEC_ROAD_GRADIENTL_FROM_AD_INCLN_CONF_QLY3_DE7_CHOICE (7u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR04_SEC_ROAD_GRADIENTL_FROM_AD_BANKING_CONF_QLY3_DE0_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR04_SEC_ROAD_GRADIENTL_FROM_AD_BANKING_CONF_QLY3_DE1_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR04_SEC_ROAD_GRADIENTL_FROM_AD_BANKING_CONF_QLY3_DE2_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR04_SEC_ROAD_GRADIENTL_FROM_AD_BANKING_CONF_QLY3_DE3_CHOICE (3u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR04_SEC_ROAD_GRADIENTL_FROM_AD_BANKING_CONF_QLY3_DE4_CHOICE (4u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR04_SEC_ROAD_GRADIENTL_FROM_AD_BANKING_CONF_QLY3_DE5_CHOICE (5u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR04_SEC_ROAD_GRADIENTL_FROM_AD_BANKING_CONF_QLY3_DE6_CHOICE (6u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR04_SEC_ROAD_GRADIENTL_FROM_AD_BANKING_CONF_QLY3_DE7_CHOICE (7u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR29_SEC_AD_WHL_LOCK_REQ_NO_REQ_APPLY_REL_NO_REQ_APPLY_RELS1_NO_REQ_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR29_SEC_AD_WHL_LOCK_REQ_NO_REQ_APPLY_REL_NO_REQ_APPLY_RELS1_APPLY_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID6_CANFD_CFG_210226_PROTOTYPE_VIMB_MID6_CAN_FD_FR29_SEC_AD_WHL_LOCK_REQ_NO_REQ_APPLY_REL_NO_REQ_APPLY_RELS1_RELS_CHOICE (2u)

/**
 * Signals in message SsmbMid6CanFdCanNmFr.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_node_id_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_pni_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_aw_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_cs_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_rmr_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_entrance_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t infotainment_and_hmi_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t body_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t visibility_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t warning_sounds_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t hazard_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_locking_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_driverinfo_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_driverinfo_poll_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pncgsd_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_global_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_trailer_caravan_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_driving_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_pre_climatization_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_charging_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_start_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_spare1_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_spare2_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_spare3_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_spare4_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnchv_energy_storage_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vehicle_api_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_ssmb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t diesel_ssmb;
};

/**
 * Signals in message SSMBMid6CanFdFr01.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr01_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_steer_sts_safe_group_ub;

    /**
     *  E2E-protection
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_steer_sts_safe_group_cntr;

    /**
     *  E2E-protection
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_steer_sts_safe_group_chks;

    /**
     *  Status of steering system
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_steer_sts_safe_group_ad_steer_sts;

    /**
     *  Performance of MotorHalf1 + MotorHalf2
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_steer_sts_safe_group_ad_steer_perf;
};

/**
 * Signals in message SSMBMid6CanFdFr02.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr02_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_mot_tq_asil_thrshld_excd_ub;

    /**
     *  Boolean stating if the current operation is within the ASIL-D area of the steering system.
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_mot_tq_asil_thrshld_excd_thrshld_exceeded;

    /**
     *  E2E protection
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_mot_tq_asil_thrshld_excd_cntr;

    /**
     *  E2E protection
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_mot_tq_asil_thrshld_excd_chks;
};

/**
 * Signals in message SSMBMid6CanFdFr03.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_t {
    /**
     *  Quality factor for SteerMotTq
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_steer_mot_tq_steer_mot_tq_qf;

    /**
     *  Steering motor torque
     *
     * Range: -7680..7680 (-30.0..30.0 NewtonMeter)
     * Scale: 0.00390625
     * Offset: 0.0
     */
    int16_t sec_steer_mot_tq_steer_mot_tq;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_steer_mot_tq_ub;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_pose_mon_safe_ub;

    /**
     * Secondary Pose monitoring Quality factor for Longitudinal, Lateral and Yaw Error
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_pose_mon_safe_safe_qf;

    /**
     * Secondary Pose monitoring Counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_pose_mon_safe_cntr;

    /**
     * Secondary Pose monitoring Checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_pose_mon_safe_chks;

    /**
     * Secondary Pose monitoring Yaw Error
     *
     * Range: -128..127 (-0.128..0.127 rad)
     * Scale: 0.001
     * Offset: 0.0
     */
    int8_t sec_pose_mon_safe_yaw_err;

    /**
     * Secondary Pose monitoring Lateral Error
     *
     * Range: -512..511 (-2.56..2.555 m)
     * Scale: 0.005
     * Offset: 0.0
     */
    int16_t sec_pose_mon_safe_lat_err;

    /**
     * Secondary Pose monitoring Longitudinal Error
     *
     * Range: -1024..1023 (-5.12..5.115 m)
     * Scale: 0.005
     * Offset: 0.0
     */
    int16_t sec_pose_mon_safe_lgt_err;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_whl_lock_sts_ub;

    /**
     * Secondary Wheel lock and degradation status Wheel Lock degraded status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_whl_lock_sts_degraded_sts;

    /**
     * Secondary Wheel lock and degradation status Wheel Lock Status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_whl_lock_sts_lock_sts;

    /**
     * Secondary Wheel lock and degradation status Counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_whl_lock_sts_cntr;

    /**
     * Secondary Wheel lock and degradation status Checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_whl_lock_sts_chks;

    /**
     *  Secondry Channel Degradation
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ssmb_degraded_ssmb_degraded;

    /**
     *  counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ssmb_degradedcntr;

    /**
     *  CRC
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ssmb_degradedchks;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ssmb_degraded_ub;
};

/**
 * Signals in message SSMBMid6CanFdFr04.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr04_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk_degraded_rdnt_ub;

    /**
     *  Counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t brk_degraded_rdnt_cntr;

    /**
     *  Checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t brk_degraded_rdnt_chks;

    /**
     *  Brake degraded status
     *
     * Range: 0..65535 (0.0..65535.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t brk_degraded_rdnt_sts;
};

/**
 * Signals in message SSMBMid6CanFdFr05.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_whl_ag_estimd_group_safe_ub;

    /**
     * AD secondary wheel angle feedback E2E Counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_whl_ag_estimd_group_safe_cntr;

    /**
     * AD secondary wheel angle feedback E2E Checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_whl_ag_estimd_group_safe_chks;

    /**
     * AD secondary wheel angle feedback Wheel angle estimate
     *
     * Range: 0..32388.00000000000190512478567 (-0.85..0.8500461200000001 rad)
     * Scale: 5.249e-05
     * Offset: -0.85
     */
    uint16_t ad_sec_whl_ag_estimd_group_safe_whl_ag;

    /**
     * AD secondary wheel angle feedback Wheel angle rate estimate.
     *
     * Range: 0..28000.000000000004 (-0.7..0.7000000000000002 rad/s)
     * Scale: 5e-05
     * Offset: -0.7
     */
    uint16_t ad_sec_whl_ag_estimd_group_safe_whl_ag_rate;

    /**
     * AD secondary wheel angle feedback Quality Factor of the rack positionÂ¨
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_whl_ag_estimd_group_safe_qf1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_whl_rot_tooth_cntr_ub;

    /**
     * Added with SCR 515, Vehicle State 519G
     * 
     * WhlRotToothCntrRec signal with Qf. E2E Counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_whl_rot_tooth_cntr_cntr;

    /**
     * Added with SCR 515, Vehicle State 519G
     * 
     * WhlRotToothCntrRec signal with Qf. E2E Checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_whl_rot_tooth_cntr_chks;

    /**
     * Added with SCR 515, Vehicle State 519G
     * 
     * WhlRotToothCntrRec signal with Qf. Wheel rotation impulse counter front left. For one complete wheel revolution the counter will increase by 96 (with 48 magnetic pole-pairs)
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_le;

    /**
     * Added with SCR 515, Vehicle State 519G
     * 
     * WhlRotToothCntrRec signal with Qf. Quality factor for front left wheel
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_le_qf;

    /**
     * Added with SCR 515, Vehicle State 519G
     * 
     * WhlRotToothCntrRec signal with Qf. Quality factor for front right wheel
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_ri_qf;

    /**
     * Added with SCR 515, Vehicle State 519G
     * 
     * WhlRotToothCntrRec signal with Qf. Quality factor for rear left wheel
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_le_qf;

    /**
     * Added with SCR 515, Vehicle State 519G
     * 
     * WhlRotToothCntrRec signal with Qf. Quality factor for rear right wheel
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_ri_qf;

    /**
     * Added with SCR 515, Vehicle State 519G
     * 
     * WhlRotToothCntrRec signal with Qf. Wheel rotation impulse counter front right. For one complete wheel revolution the counter will increase by 96 (with 48 magnetic pole-pairs)
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_ri;

    /**
     * Added with SCR 515, Vehicle State 519G
     * 
     * WhlRotToothCntrRec signal with Qf. Wheel rotation impulse counter rear left. For one complete wheel revolution the counter will increase by 96 (with 48 magnetic pole-pairs)
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_le;

    /**
     * Added with SCR 515, Vehicle State 519G
     * 
     * WhlRotToothCntrRec signal with Qf. Wheel rotation impulse counter Rear right. For one complete wheel revolution the counter will increase by 96 (with 48 magnetic pole-pairs)
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_ri;
};

/**
 * Signals in message SSMBMid6CanFdFr06.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_a_lat_data_raw_safe_ub;

    /**
     * Lateral acceleration estimation (Secondary) Quality factor for Min and Max signals
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_a_lat_data_raw_safe_min_max_qf;

    /**
     * Lateral acceleration estimation (Secondary) Counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_a_lat_data_raw_safe_cntr;

    /**
     * Lateral acceleration estimation (Secondary) Checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_a_lat_data_raw_safe_chks;

    /**
     * Lateral acceleration estimation (Secondary) Maximum Lateral Acceleration
     *
     * Range: 0..32767.000000000003 (-16.384..16.383000000000003 m/s^2)
     * Scale: 0.001
     * Offset: -16.384
     */
    uint16_t sec_a_lat_data_raw_safe_max;

    /**
     * Lateral acceleration estimation (Secondary) Minimum Lateral Acceleration
     *
     * Range: 0..32767.000000000003 (-16.384..16.383000000000003 m/s^2)
     * Scale: 0.001
     * Offset: -16.384
     */
    uint16_t sec_a_lat_data_raw_safe_min;

    /**
     * Lateral acceleration estimation (Secondary) Nominal Lateral Acceleration
     *
     * Range: 0..32767.000000000003 (-16.384..16.383000000000003 m/s^2)
     * Scale: 0.001
     * Offset: -16.384
     */
    uint16_t sec_a_lat_data_raw_safe_nom;

    /**
     * Lateral acceleration estimation (Secondary) Quality factor for Nom signal
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_a_lat_data_raw_safe_nom_qf;

    /**
     * Longitudinal acceleration estimation (Secondary) Quality factor for Nom signal
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_a_lgt_data_raw_safe_nom_qf;

    /**
     * Longitudinal acceleration estimation (Secondary) Counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_a_lgt_data_raw_safe_cntr;

    /**
     * Longitudinal acceleration estimation (Secondary) Checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_a_lgt_data_raw_safe_chks;

    /**
     * Longitudinal acceleration estimation (Secondary) Maximum longitudinal acceleration
     *
     * Range: 0..32767.000000000003 (-16.384..16.383000000000003 m/s^2)
     * Scale: 0.001
     * Offset: -16.384
     */
    uint16_t sec_a_lgt_data_raw_safe_max;

    /**
     * Longitudinal acceleration estimation (Secondary) Minimum longitudinal acceleration
     *
     * Range: 0..32767.000000000003 (-16.384..16.383000000000003 m/s^2)
     * Scale: 0.001
     * Offset: -16.384
     */
    uint16_t sec_a_lgt_data_raw_safe_min;

    /**
     * Longitudinal acceleration estimation (Secondary) Nominal longitudinal acceleration
     *
     * Range: 0..32767.000000000003 (-16.384..16.383000000000003 m/s^2)
     * Scale: 0.001
     * Offset: -16.384
     */
    uint16_t sec_a_lgt_data_raw_safe_nom;

    /**
     * Longitudinal acceleration estimation (Secondary) Quality factor for Min and Max signals
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_a_lgt_data_raw_safe_min_max_qf;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_axle_slip_sts_and_rel_ag_ub;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_whl_rot_dir_re_safe_ub;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_a_lgt_data_raw_safe_ub;

    /**
     * Wheel Rotation direction for Rear left and Rear right. E2E Counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_whl_rot_dir_re_safe_cntr;

    /**
     * Wheel Rotation direction for Rear left and Rear right. Left wheel
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_whl_rot_dir_re_safe_le;

    /**
     * Wheel Rotation direction for Rear left and Rear right. Qualilty factor of left wheel rotation
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_whl_rot_dir_re_safe_le_qf;

    /**
     * Wheel Rotation direction for Rear left and Rear right. Right wheel
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_whl_rot_dir_re_safe_ri;

    /**
     * Wheel Rotation direction for Rear left and Rear right. Quality factor of right wheel rotation
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_whl_rot_dir_re_safe_ri_qf;

    /**
     * Wheel Rotation direction for Rear left and Rear right. E2E checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_whl_rot_dir_re_safe_chks;

    /**
     * Secondary:
     * ---------
     * It contains Front and Rear Axle Slip status, Intervention Status and Relative Roll & Pitch informations. Front axle slip status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_axle_slip_sts_and_rel_ag_frnt_axle;

    /**
     * Secondary:
     * ---------
     * It contains Front and Rear Axle Slip status, Intervention Status and Relative Roll & Pitch informations. Rear axle slip status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_axle_slip_sts_and_rel_ag_re_axle;

    /**
     * Secondary:
     * ---------
     * It contains Front and Rear Axle Slip status, Intervention Status and Relative Roll & Pitch informations. Qulality Factor of Relative Pitch
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_axle_slip_sts_and_rel_ag_rel_pitch_qf;

    /**
     * Secondary:
     * ---------
     * It contains Front and Rear Axle Slip status, Intervention Status and Relative Roll & Pitch informations. Qulality Factor of Relative Roll
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_axle_slip_sts_and_rel_ag_rel_rol_qf;

    /**
     * Secondary:
     * ---------
     * It contains Front and Rear Axle Slip status, Intervention Status and Relative Roll & Pitch informations. Relative Pitch
     *
     * Range: -32768..32766 (-1.6384..1.6383 rad)
     * Scale: 5e-05
     * Offset: 0.0
     */
    int16_t sec_axle_slip_sts_and_rel_ag_rel_pitch;

    /**
     * Secondary:
     * ---------
     * It contains Front and Rear Axle Slip status, Intervention Status and Relative Roll & Pitch informations. Relative Roll
     *
     * Range: -32768..32766 (-1.6384..1.6383 rad)
     * Scale: 5e-05
     * Offset: 0.0
     */
    int16_t sec_axle_slip_sts_and_rel_ag_rel_roll;

    /**
     * Secondary:
     * ---------
     * It contains Front and Rear Axle Slip status, Intervention Status and Relative Roll & Pitch informations. Intervention status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_axle_slip_sts_and_rel_ag_intv_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_v_lat_safe_ub;

    /**
     * Lateral Velocity estimation (Secondary) Counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_v_lat_safe_cntr;

    /**
     * Lateral Velocity estimation (Secondary) Quality Factor for Nom signal
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_v_lat_safe_nom_qf;

    /**
     * Lateral Velocity estimation (Secondary) Quality factor for Min and Max signals
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_v_lat_safe_min_max_qf;

    /**
     * Lateral Velocity estimation (Secondary) Checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_v_lat_safe_chks;

    /**
     * Lateral Velocity estimation (Secondary) Maximum Lateral Velocity
     *
     * Range: -16384..16383 (-16.384..16.383 m/s)
     * Scale: 0.001
     * Offset: 0.0
     */
    int16_t sec_v_lat_safe_max;

    /**
     * Lateral Velocity estimation (Secondary) Minimum Lateral Velocity
     *
     * Range: -16384..16383 (-16.384..16.383 m/s)
     * Scale: 0.001
     * Offset: 0.0
     */
    int16_t sec_v_lat_safe_min;

    /**
     * Lateral Velocity estimation (Secondary) Nominal Lateral Velocity
     *
     * Range: -16384..16383 (-16.384..16.383 m/s)
     * Scale: 0.001
     * Offset: 0.0
     */
    int16_t sec_v_lat_safe_nom;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_yaw_rate_safe_ub;

    /**
     * Yaw Rate Estimation (Secondary) Quality factor for Nom signal
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_yaw_rate_safe_nom_qf;

    /**
     * Yaw Rate Estimation (Secondary) Quality factor for Min and Max signals
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_yaw_rate_safe_min_max_qf;

    /**
     * Yaw Rate Estimation (Secondary) Counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_yaw_rate_safe_cntr;

    /**
     * Yaw Rate Estimation (Secondary) Checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_yaw_rate_safe_chks;

    /**
     * Yaw Rate Estimation (Secondary) Maximum Yaw Rate
     *
     * Range: -16384..16383 (-3.2768..3.2766 rad/s)
     * Scale: 0.0002
     * Offset: 0.0
     */
    int16_t sec_yaw_rate_safe_max;

    /**
     * Yaw Rate Estimation (Secondary) Minimum Yaw Rate
     *
     * Range: -16384..16383 (-3.2768..3.2766 rad/s)
     * Scale: 0.0002
     * Offset: 0.0
     */
    int16_t sec_yaw_rate_safe_min;

    /**
     * Yaw Rate Estimation (Secondary) Nominal Yaw Rate
     *
     * Range: -16384..16383 (-3.2768..3.2766 rad/s)
     * Scale: 0.0002
     * Offset: 0.0
     */
    int16_t sec_yaw_rate_safe_nom;
};

/**
 * Signals in message SSMBMid6CanFdFr07.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_veh_spd_group_safe_ub;

    /**
     * Vehicle speed over ground and Moving direction (Secondary) Actual moving direction
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_veh_spd_group_safe_mov_dir;

    /**
     * Vehicle speed over ground and Moving direction (Secondary) Counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_veh_spd_group_safe_cntr;

    /**
     * Vehicle speed over ground and Moving direction (Secondary) Checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_veh_spd_group_safe_chks;

    /**
     * Vehicle speed over ground and Moving direction (Secondary) Quality factor for Min and Max signals
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_veh_spd_group_safe_min_max_qf;

    /**
     * Vehicle speed over ground and Moving direction (Secondary) Maximum vehicle speed over ground
     *
     * Range: 0..8191 (0.0..81.91 m/s)
     * Scale: 0.01
     * Offset: 0.0
     */
    uint16_t sec_veh_spd_group_safe_max;

    /**
     * Vehicle speed over ground and Moving direction (Secondary) Quality factor for Actual moving direction
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_veh_spd_group_safe_mov_dir_qf;

    /**
     * Vehicle speed over ground and Moving direction (Secondary) Minimum vehicle speed over ground
     *
     * Range: 0..8191 (0.0..81.91 m/s)
     * Scale: 0.01
     * Offset: 0.0
     */
    uint16_t sec_veh_spd_group_safe_min;

    /**
     * Vehicle speed over ground and Moving direction (Secondary) Quality factor for Nom signal
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_veh_spd_group_safe_nom_qf;

    /**
     * Vehicle speed over ground and Moving direction (Secondary) Nominal vehicle speed over ground
     *
     * Range: 0..8191 (0.0..81.91 m/s)
     * Scale: 0.01
     * Offset: 0.0
     */
    uint16_t sec_veh_spd_group_safe_nom;
};

/**
 * Signals in message SSMBMid6CanFdFr08.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_t {
    /**
     * Wheel angle speed front wheels, secondary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Qf for wheel speed sensor
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_whl_ag_spd_frnt_safe_ri_qf;

    /**
     * Wheel angle speed front wheels, secondary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Qf for wheel speed sensor
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_whl_ag_spd_frnt_safe_le_qf;

    /**
     * Wheel angle speed front wheels, secondary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_whl_ag_spd_frnt_safe_cntr;

    /**
     * Wheel angle speed front wheels, secondary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_whl_ag_spd_frnt_safe_chks;

    /**
     * Wheel angle speed front wheels, secondary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Angular velocity of left wheel.
     *
     * Range: -32640..32640 (-255.0..255.0 rad/s)
     * Scale: 0.0078125
     * Offset: 0.0
     */
    int16_t sec_whl_ag_spd_frnt_safe_le;

    /**
     * Wheel angle speed front wheels, secondary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Angular velocity of right wheel.
     *
     * Range: -32640..32640 (-255.0..255.0 rad/s)
     * Scale: 0.0078125
     * Offset: 0.0
     */
    int16_t sec_whl_ag_spd_frnt_safe_ri;

    /**
     * Wheel angle speed rear wheels, secondary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Qf for wheel speed sensor
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_whl_ag_spd_re_safe_ri_qf;

    /**
     * Wheel angle speed rear wheels, secondary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Qf for wheel speed sensor
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_whl_ag_spd_re_safe_le_qf;

    /**
     * Wheel angle speed rear wheels, secondary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_whl_ag_spd_re_safe_cntr;

    /**
     * Wheel angle speed rear wheels, secondary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_whl_ag_spd_re_safe_chks;

    /**
     * Wheel angle speed rear wheels, secondary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Angular velocity of left wheel.
     *
     * Range: -32640..32640 (-255.0..255.0 rad/s)
     * Scale: 0.0078125
     * Offset: 0.0
     */
    int16_t sec_whl_ag_spd_re_safe_le;

    /**
     * Wheel angle speed rear wheels, secondary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Angular velocity of right wheel.
     *
     * Range: -32640..32640 (-255.0..255.0 rad/s)
     * Scale: 0.0078125
     * Offset: 0.0
     */
    int16_t sec_whl_ag_spd_re_safe_ri;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_whl_ag_spd_frnt_safe_ub;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_whl_ag_spd_re_safe_ub;

    /**
     * Vehicle Mass estimation Vehicle Mass Nominal Quality factor
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_veh_m_safe_nom_qf;

    /**
     * Vehicle Mass estimation E2E Conter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_veh_m_safe_cntr;

    /**
     * Vehicle Mass estimation Vehicle Mass Maximum Value
     *
     * Range: 0..255 (2400.0..3675.0 kg)
     * Scale: 5.0
     * Offset: 2400.0
     */
    uint8_t sec_veh_m_safe_veh_m_max;

    /**
     * Vehicle Mass estimation Vehicle Mass Minimum Value
     *
     * Range: 0..255 (2400.0..3675.0 kg)
     * Scale: 5.0
     * Offset: 2400.0
     */
    uint8_t sec_veh_m_safe_veh_m_min;

    /**
     * Vehicle Mass estimation Vehicle Mass Nominal Value
     *
     * Range: 0..255 (2400.0..3675.0 kg)
     * Scale: 5.0
     * Offset: 2400.0
     */
    uint8_t sec_veh_m_safe_veh_m_nom;

    /**
     * Vehicle Mass estimation E2E Checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_veh_m_safe_chks;

    /**
     * Vehicle Mass estimation Vehicle Mass Min Max Quality factor
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_veh_m_safe_safe_qf;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_veh_m_safe_ub;
};

/**
 * Signals in message SSMBMid6CanFdFr11.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_whl_ag_rate_lim_estimd_safe_ub;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_safe_stop_actv_group_safe_ub;

    /**
     * Platform safe stop, secondary channel Safe stop active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_safe_stop_actv_group_safe_platform_safe_stop_actv;

    /**
     * Platform safe stop, secondary channel E2E counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_safe_stop_actv_group_safe_cntr;

    /**
     * Platform safe stop, secondary channel E2E checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_safe_stop_actv_group_safe_chks;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_max_a_lat_estimd_group_ub;

    /**
     *  Maximum lateral acceleration
     *
     * Range: -16352.00000000000235294117647..16353.00000000000235294117647 (-138.99200000000002..139.00050000000002 m/s^2)
     * Scale: 0.0085
     * Offset: 0.0
     */
    int16_t sec_max_a_lat_estimd_group_acceleration;

    /**
     *  Maximum lateral acceleration rate
     *
     * Range: -16384..16383 (-4.0..3.999755859375 Unitless)
     * Scale: 0.000244140625
     * Offset: 0.0
     */
    int16_t sec_max_a_lat_estimd_group_jerk;

    /**
     *  Counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_whl_ag_rate_lim_estimd_safe_cntr;

    /**
     *  Checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_whl_ag_rate_lim_estimd_safe_chks;

    /**
     *  Maximum wheel angle rate calculated from limited rack position rate
     *
     * Range: 0..28000.000000000004 (-0.7..0.7000000000000002 rad/s)
     * Scale: 5e-05
     * Offset: -0.7
     */
    uint16_t ad_sec_whl_ag_rate_lim_estimd_safe_ad_whl_ag_rate1;
};

/**
 * Signals in message VimbMid6CanFdCanNmFr.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_node_id_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_pni_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_aw_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_cs_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_rmr_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_entrance_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t infotainment_and_hmi_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t body_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t visibility_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t warning_sounds_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t hazard_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_locking_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_driverinfo_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_driverinfo_poll_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pncgsd_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_global_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_trailer_caravan_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_driving_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_pre_climatization_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_charging_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_start_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_spare1_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_spare2_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_spare3_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_spare4_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnchv_energy_storage_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vehicle_api_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_vimb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t diesel_vimb;
};

/**
 * Signals in message VIMBMid6CanFdFr01.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sds_flt_mgr_sts_rdnt_ub;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_safe_stop_req_safe_ub;

    /**
     * Safe stop request Safe stop request
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_safe_stop_req_safe_safe_stop_req;

    /**
     * Safe stop request E2E counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_safe_stop_req_safe_cntr;

    /**
     * Safe stop request E2E checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_safe_stop_req_safe_chks;

    /**
     * SDS Fault Manager Status is to communicate the fault status to SSMB (ASIL D)
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sds_flt_mgr_sts_rdnt_sds_flt_mgr_sts_rdnt;

    /**
     * SDS Fault Manager Status is to communicate the fault status to SSMB (ASIL D) Counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sds_flt_mgr_sts_rdnt_cntr;

    /**
     * SDS Fault Manager Status is to communicate the fault status to SSMB (ASIL D) CRC
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sds_flt_mgr_sts_rdnt_chks;
};

/**
 * Signals in message VIMBMid6CanFdFr03.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_t {
    /**
     * POSE information E2E profile 5 Check Sum
     *
     * Range: 0..65535 (0.0..65535.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ad_sec_pose_chks;

    /**
     * POSE information E2E profile 5 counter
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pose_cntr;

    /**
     * POSE information Acceleration X
     *
     * Range: 0..1048575 (-52.429..52.4285 m/s^2)
     * Scale: 0.0001
     * Offset: -52.429
     */
    uint32_t ad_sec_pose_ax;

    /**
     * POSE information Acceleration Y
     *
     * Range: 0..1048575 (-52.429..52.4285 m/s^2)
     * Scale: 0.0001
     * Offset: -52.429
     */
    uint32_t ad_sec_pose_ay;

    /**
     * POSE information Acceleration Z
     *
     * Range: 0..1048575 (-52.429..52.4285 m/s^2)
     * Scale: 0.0001
     * Offset: -52.429
     */
    uint32_t ad_sec_pose_az;

    /**
     * POSE information E2E profile 5 Data ID
     *
     * Range: 0..65535 (0.0..65535.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ad_sec_pose_data_id;

    /**
     * POSE information Pitch
     *
     * Range: 0..65520.000000000006 (-1.638..1.6380000000000003 rad)
     * Scale: 5e-05
     * Offset: -1.638
     */
    uint16_t ad_sec_pose_pitch;

    /**
     * POSE information Pitch rate
     *
     * Range: 0..1048575.0000000001 (-5.243..5.242750000000001 rad/s)
     * Scale: 1e-05
     * Offset: -5.243
     */
    uint32_t ad_sec_pose_pitch_rate;

    /**
     * POSE information Position X
     *
     * Range: -2147483648..2147483647 (-2147483648.0..2147483647.0 5mm)
     * Scale: 1.0
     * Offset: 0.0
     */
    int32_t ad_sec_pose_pos_x;

    /**
     * POSE information Position Y
     *
     * Range: -2147483648..2147483647 (-2147483648.0..2147483647.0 5mm)
     * Scale: 1.0
     * Offset: 0.0
     */
    int32_t ad_sec_pose_pos_y;

    /**
     * POSE information Roll
     *
     * Range: 0..65520.000000000006 (-1.638..1.6380000000000003 rad)
     * Scale: 5e-05
     * Offset: -1.638
     */
    uint16_t ad_sec_pose_roll;

    /**
     * POSE information Roll rate
     *
     * Range: 0..1048575.0000000001 (-5.243..5.242750000000001 rad/s)
     * Scale: 1e-05
     * Offset: -5.243
     */
    uint32_t ad_sec_pose_roll_rate;

    /**
     * POSE information Time Stamp Nano Second
     *
     * Range: 0..4294967295 (0.0..4294967295.0 ns)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint32_t ad_sec_pose_ti_stamp_nano_sec;

    /**
     * POSE information Time stampSecond
     *
     * Range: 0..4294967295 (0.0..4294967295.0 s)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint32_t ad_sec_pose_ti_stamp_sec;

    /**
     * POSE information Velocity X
     *
     * Range: 0..65534.999999999996 (-12.768..52.766999999999996 m/s)
     * Scale: 0.001
     * Offset: -12.768
     */
    uint16_t ad_sec_pose_vx;

    /**
     * POSE information Velocity Y
     *
     * Range: 0..16382.999999999999 (-8.192..8.190999999999999 m/s)
     * Scale: 0.001
     * Offset: -8.192
     */
    uint16_t ad_sec_pose_vy;

    /**
     * POSE information Yaw
     *
     * Range: 0..16776000 (-4.194..4.194 rad)
     * Scale: 5e-07
     * Offset: -4.194
     */
    uint32_t ad_sec_pose_yaw;

    /**
     * POSE information Yaw rate
     *
     * Range: 0..4194000 (-2.097..2.097 rad/s)
     * Scale: 1e-06
     * Offset: -2.097
     */
    uint32_t ad_sec_pose_yaw_rate;

    /**
     * POSE information Confidence for acceleration X
     *
     * Range: 0..7 (0.0..7.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pose_ax_conf;

    /**
     * POSE information Confidence for acceleration Y
     *
     * Range: 0..7 (0.0..7.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pose_ay_conf;

    /**
     * POSE information Confidence for acceleration Z
     *
     * Range: 0..7 (0.0..7.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pose_az_conf;

    /**
     * POSE information Confidence for pitch
     *
     * Range: 0..7 (0.0..7.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pose_pitch_conf;

    /**
     * POSE information Confidence for Pitch rate
     *
     * Range: 0..7 (0.0..7.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pose_pitch_rate_conf;

    /**
     * POSE information Confidence for position X
     *
     * Range: 0..7 (0.0..7.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pose_pos_x_conf;

    /**
     * POSE information Confidence for position Y
     *
     * Range: 0..7 (0.0..7.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pose_pos_y_conf;

    /**
     * POSE information Confidence for Roll
     *
     * Range: 0..7 (0.0..7.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pose_roll_conf;

    /**
     * POSE information Confidence for roll rate
     *
     * Range: 0..7 (0.0..7.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pose_roll_rate_conf;

    /**
     * POSE information Confidence for velocity X
     *
     * Range: 0..7 (0.0..7.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pose_vx_conf;

    /**
     * POSE information Confidence for velocity Y
     *
     * Range: 0..7 (0.0..7.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pose_vy_conf;

    /**
     * POSE information Confidence for yaw
     *
     * Range: 0..7 (0.0..7.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pose_yaw_conf;

    /**
     * POSE information Confidence for yaw rate
     *
     * Range: 0..7 (0.0..7.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pose_yaw_rate_conf;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_pose_ub;
};

/**
 * Signals in message VIMBMid6CanFdFr04.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_road_gradientl_from_ad_ub;

    /**
     * Estimated road gradients, secondary channels Inclination confidence
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_road_gradientl_from_ad_incln_conf;

    /**
     * Estimated road gradients, secondary channels Banking confidence
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_road_gradientl_from_ad_banking_conf;

    /**
     * Estimated road gradients, secondary channels E2E counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_road_gradientl_from_ad_cntr;

    /**
     * Estimated road gradients, secondary channels Road banking
     *
     * Range: -32767.00000000000327675470214..32767.00000000000327675470214 (-0.9999833060000001..0.9999833060000001 rad)
     * Scale: 3.0518e-05
     * Offset: 0.0
     */
    int16_t sec_road_gradientl_from_ad_banking;

    /**
     * Estimated road gradients, secondary channels E2E checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_road_gradientl_from_ad_chks;

    /**
     * Estimated road gradients, secondary channels Road inclination
     *
     * Range: -32767.00000000000327675470214..32767.00000000000327675470214 (-0.9999833060000001..0.9999833060000001 rad)
     * Scale: 3.0518e-05
     * Offset: 0.0
     */
    int16_t sec_road_gradientl_from_ad_incln;
};

/**
 * Signals in message VIMBMid6CanFdFr14.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr14_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_whl_ag_req_group_safe_ub;

    /**
     * AD Requested wheel angle, secondary channel E2E Counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_whl_ag_req_group_safe_cntr;

    /**
     * AD Requested wheel angle, secondary channel The requested wheel angle. The wheel angle is supervised by the LatCtrl ASIL D supervisory controller before being converted to an ASIL D rack position request.
     *
     * Range: 0..32388.00000000000190512478567 (-0.85..0.8500461200000001 rad)
     * Scale: 5.249e-05
     * Offset: -0.85
     */
    uint16_t ad_sec_whl_ag_req_group_safe_whl_ag_req;

    /**
     * AD Requested wheel angle, secondary channel E2E Checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_whl_ag_req_group_safe_chks;
};

/**
 * Signals in message VIMBMid6CanFdFr19.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_t {
    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 E2E checksum, profile 5
     *
     * Range: 0..65535 (0.0..65535.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ad_sec_pss_group_safe0_chks;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 E2E Counter, profile 5
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pss_group_safe0_cntr;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 E2E Data ID, profile 5
     *
     * Range: 0..65535 (0.0..65535.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ad_sec_pss_group_safe0_data_id;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Delta time position 1
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe0_delta_t_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Delta time position 2
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe0_delta_t_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Delta X position 1
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe0_delta_x_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Delta X position 2
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe0_delta_x_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Delta Y position 1
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe0_delta_y_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Delta Y position 2
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe0_delta_y_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Heading position 1
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe0_heading_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Heading position 2
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe0_heading_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Init heading
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe0_init_heading;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Init position X
     *
     * Range: -2147483648..2147483647 (-2147483648.0..2147483647.0 m)
     * Scale: 1.0
     * Offset: 0.0
     */
    int32_t ad_sec_pss_group_safe0_init_pos_x;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Init position Y
     *
     * Range: -2147483648..2147483647 (-2147483648.0..2147483647.0 m)
     * Scale: 1.0
     * Offset: 0.0
     */
    int32_t ad_sec_pss_group_safe0_init_pos_y;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Time stamp, nano seconds
     *
     * Range: 0..4294967295 (0.0..4294967295.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe0_ti_stamp_nano_sec;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Time stamp, seconds
     *
     * Range: 0..4294967295 (0.0..4294967295.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe0_ti_stamp_sec;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Trajectory ID
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pss_group_safe0_traject_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_pss_group_safe0_ub;
};

/**
 * Signals in message VIMBMid6CanFdFr20.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_t {
    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  E2E checksum, profile 5
     *
     * Range: 0..65535 (0.0..65535.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ad_sec_pss_group_safe1_chks;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  E2E counter, profile 5
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pss_group_safe1_cntr;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  E2E Data ID, profile 5
     *
     * Range: 0..65535 (0.0..65535.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ad_sec_pss_group_safe1_data_id;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta time position 1
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe1_delta_t_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta time position 2
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe1_delta_t_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta time position 3
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe1_delta_t_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta time position 4
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe1_delta_t_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta time position 5
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe1_delta_t_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta time position 6
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe1_delta_t_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta X position 1
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe1_delta_x_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta X position 2
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe1_delta_x_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta X position 3
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe1_delta_x_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta X position 4
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe1_delta_x_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta X position 5
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe1_delta_x_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta X position 6
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe1_delta_x_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta Y position 1
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe1_delta_y_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta Y position 2
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe1_delta_y_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta Y position 3
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe1_delta_y_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta Y position 4
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe1_delta_y_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta Y position 5
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe1_delta_y_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta Y position 6
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe1_delta_y_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Heading position 1
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe1_heading_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Heading position 2
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe1_heading_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Heading position 3
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe1_heading_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Heading position 4
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe1_heading_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Heading position 5
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe1_heading_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Heading position 6
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe1_heading_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Trajectory ID
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pss_group_safe1_traject_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_pss_group_safe1_ub;
};

/**
 * Signals in message VIMBMid6CanFdFr21.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_t {
    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  E2E checksum, profile 5
     *
     * Range: 0..65535 (0.0..65535.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ad_sec_pss_group_safe2_chks;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  E2E counter, profile 5
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pss_group_safe2_cntr;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  E2E Data ID, profile 5
     *
     * Range: 0..65535 (0.0..65535.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ad_sec_pss_group_safe2_data_id;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta time position 1
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe2_delta_t_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta time position 2
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe2_delta_t_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta time position 3
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe2_delta_t_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta time position 4
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe2_delta_t_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta time position 5
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe2_delta_t_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta time position 6
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe2_delta_t_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta X position 1
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe2_delta_x_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta X position 2
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe2_delta_x_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta X position 3
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe2_delta_x_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta X position 4
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe2_delta_x_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta X position 5
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe2_delta_x_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta X position 6
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe2_delta_x_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta Y position 1
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe2_delta_y_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta Y position 2
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe2_delta_y_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta Y position 3
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe2_delta_y_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta Y position 4
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe2_delta_y_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta Y position 5
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe2_delta_y_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta Y position 6
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe2_delta_y_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Heading position 1
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe2_heading_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Heading position 2
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe2_heading_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Heading position 3
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe2_heading_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Heading position 4
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe2_heading_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Heading position 5
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe2_heading_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Heading position 6
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe2_heading_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Trajectory ID
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pss_group_safe2_traject_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_pss_group_safe2_ub;
};

/**
 * Signals in message VIMBMid6CanFdFr22.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_t {
    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  E2E checksum, profile 5
     *
     * Range: 0..65535 (0.0..65535.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ad_sec_pss_group_safe3_chks;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  E2E counter, profile 5
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pss_group_safe3_cntr;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  E2E Data ID, profile 5
     *
     * Range: 0..65535 (0.0..65535.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ad_sec_pss_group_safe3_data_id;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta time position 1
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe3_delta_t_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta time position 2
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe3_delta_t_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta time position 3
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe3_delta_t_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta time position 4
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe3_delta_t_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta time position 5
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe3_delta_t_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta time position 6
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe3_delta_t_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta X position 1
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe3_delta_x_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta X position 2
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe3_delta_x_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta X position 3
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe3_delta_x_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta X position 4
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe3_delta_x_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta X position 5
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe3_delta_x_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta X position 6
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe3_delta_x_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta Y position 1
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe3_delta_y_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta Y position 2
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe3_delta_y_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta Y position 3
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe3_delta_y_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta Y position 4
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe3_delta_y_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta Y position 5
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe3_delta_y_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta Y position 6
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe3_delta_y_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Heading position 1
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe3_heading_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Heading position 2
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe3_heading_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Heading position 3
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe3_heading_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Heading position 4
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe3_heading_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Heading position 5
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe3_heading_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Heading position 6
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe3_heading_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Trajectory ID
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pss_group_safe3_traject_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_pss_group_safe3_ub;
};

/**
 * Signals in message VIMBMid6CanFdFr23.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_t {
    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  E2E checksum, profile 5
     *
     * Range: 0..65535 (0.0..65535.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ad_sec_pss_group_safe4_chks;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  E2E counter, profile 5
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pss_group_safe4_cntr;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  E2E Data ID, profile 5
     *
     * Range: 0..65535 (0.0..65535.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ad_sec_pss_group_safe4_data_id;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta time position 1
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe4_delta_t_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta time position 2
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe4_delta_t_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta time position 3
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe4_delta_t_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta time position 4
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe4_delta_t_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta time position 5
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe4_delta_t_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta time position 6
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe4_delta_t_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta X position 1
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe4_delta_x_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta X position 2
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe4_delta_x_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta X position 3
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe4_delta_x_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta X position 4
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe4_delta_x_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta X position 5
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe4_delta_x_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta X position 6
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe4_delta_x_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta Y position 1
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe4_delta_y_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta Y position 2
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe4_delta_y_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta Y position 3
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe4_delta_y_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta Y position 4
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe4_delta_y_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta Y position 5
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe4_delta_y_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta Y position 6
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe4_delta_y_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Heading position 1
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe4_heading_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Heading position 2
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe4_heading_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Heading position 3
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe4_heading_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Heading position 4
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe4_heading_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Heading position 5
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe4_heading_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Heading position 6
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe4_heading_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Trajectory ID
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pss_group_safe4_traject_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_pss_group_safe4_ub;
};

/**
 * Signals in message VIMBMid6CanFdFr24.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_t {
    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  E2E checksum, profile 5
     *
     * Range: 0..65535 (0.0..65535.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ad_sec_pss_group_safe5_chks;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  E2E counter, profile 5
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pss_group_safe5_cntr;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  E2E Data ID, profile 5
     *
     * Range: 0..65535 (0.0..65535.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ad_sec_pss_group_safe5_data_id;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta time position 1
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe5_delta_t_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta time position 2
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe5_delta_t_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta time position 3
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe5_delta_t_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta time position 4
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe5_delta_t_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta time position 5
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe5_delta_t_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta time position 6
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe5_delta_t_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta X position 1
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe5_delta_x_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta X position 2
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe5_delta_x_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta X position 3
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe5_delta_x_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta X position 4
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe5_delta_x_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta X position 5
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe5_delta_x_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta X position 6
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe5_delta_x_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta Y position 1
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe5_delta_y_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta Y position 2
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe5_delta_y_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta Y position 3
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe5_delta_y_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta Y position 4
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe5_delta_y_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta Y position 5
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe5_delta_y_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta Y position 6
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe5_delta_y_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Heading position 1
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe5_heading_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Heading position 2
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe5_heading_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Heading position 3
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe5_heading_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Heading position 4
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe5_heading_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Heading position 5
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe5_heading_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Heading position 6
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe5_heading_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Trajectory ID
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pss_group_safe5_traject_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_pss_group_safe5_ub;
};

/**
 * Signals in message VIMBMid6CanFdFr25.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_t {
    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  E2E checksum, profile 5
     *
     * Range: 0..65535 (0.0..65535.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ad_sec_pss_group_safe6_chks;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  E2E counter, profile 5
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pss_group_safe6_cntr;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  E2E Data ID, profile 5
     *
     * Range: 0..65535 (0.0..65535.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ad_sec_pss_group_safe6_data_id;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta time position 1
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe6_delta_t_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta time position 2
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe6_delta_t_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta time position 3
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe6_delta_t_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta time position 4
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe6_delta_t_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta time position 5
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe6_delta_t_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta time position 6
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe6_delta_t_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta X position 1
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe6_delta_x_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta X position 2
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe6_delta_x_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta X position 3
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe6_delta_x_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta X position 4
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe6_delta_x_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta X position 5
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe6_delta_x_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta X position 6
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe6_delta_x_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta Y position 1
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe6_delta_y_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta Y position 2
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe6_delta_y_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta Y position 3
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe6_delta_y_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta Y position 4
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe6_delta_y_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta Y position 5
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe6_delta_y_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta Y position 6
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe6_delta_y_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Heading position 1
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe6_heading_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Heading position 2
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe6_heading_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Heading position 3
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe6_heading_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Heading position 4
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe6_heading_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Heading position 5
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe6_heading_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Heading position 6
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe6_heading_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Trajectory ID
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pss_group_safe6_traject_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_pss_group_safe6_ub;
};

/**
 * Signals in message VIMBMid6CanFdFr26.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_t {
    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 E2E checksum, profile 5
     *
     * Range: 0..65535 (0.0..65535.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ad_sec_pss_group_safe7_chks;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 E2E counter, profile 5
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pss_group_safe7_cntr;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 E2E Data ID, profile 5
     *
     * Range: 0..65535 (0.0..65535.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ad_sec_pss_group_safe7_data_id;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Delta time position 1
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe7_delta_t_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Delta time position 2
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe7_delta_t_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Delta time position 3
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe7_delta_t_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Delta time position 4
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe7_delta_t_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Delta time position 5
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe7_delta_t_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Delta time position 6
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe7_delta_t_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Delta X position 1
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe7_delta_x_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Delta X position 2
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe7_delta_x_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Delta X position 3
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe7_delta_x_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Delta X position 4
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe7_delta_x_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Delta X position 5
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe7_delta_x_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Delta X position 6
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe7_delta_x_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Delta Y position 1
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe7_delta_y_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Delta Y position 2
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe7_delta_y_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Delta Y position 3
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe7_delta_y_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Delta Y position 4
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe7_delta_y_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Delta Y position 5
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe7_delta_y_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Delta Y position 6
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe7_delta_y_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Heading position 1
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe7_heading_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Heading position 2
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe7_heading_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Heading position 3
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe7_heading_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Heading position 4
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe7_heading_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Heading position 5
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe7_heading_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Heading position 6
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe7_heading_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44 Trajectory ID
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pss_group_safe7_traject_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_pss_group_safe7_ub;
};

/**
 * Signals in message VIMBMid6CanFdFr27.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_t {
    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 E2E checksum, profile 5
     *
     * Range: 0..65535 (0.0..65535.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ad_sec_pss_group_safe8_chks;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 E2E counter, profile 5
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pss_group_safe8_cntr;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 E2E Data ID, profile 5
     *
     * Range: 0..65535 (0.0..65535.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ad_sec_pss_group_safe8_data_id;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta time position 1
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe8_delta_t_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta time position 2
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe8_delta_t_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta time position 3
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe8_delta_t_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta time position 4
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe8_delta_t_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta time position 5
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe8_delta_t_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta time position 6
     *
     * Range: 0..262000 (0.0..0.262 s)
     * Scale: 1e-06
     * Offset: 0.0
     */
    uint32_t ad_sec_pss_group_safe8_delta_t_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta X position 1
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe8_delta_x_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta X position 2
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe8_delta_x_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta X position 3
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe8_delta_x_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta X position 4
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe8_delta_x_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta X position 5
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe8_delta_x_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta X position 6
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe8_delta_x_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta Y position 1
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe8_delta_y_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta Y position 2
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe8_delta_y_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta Y position 3
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe8_delta_y_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta Y position 4
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe8_delta_y_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta Y position 5
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe8_delta_y_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta Y position 6
     *
     * Range: 0..262140.00000000003 (-13.107..13.107000000000003 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_sec_pss_group_safe8_delta_y_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Heading position 1
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe8_heading_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Heading position 2
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe8_heading_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Heading position 3
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe8_heading_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Heading position 4
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe8_heading_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Heading position 5
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe8_heading_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Heading position 6
     *
     * Range: 0..65535.000000000006 (-3.2767..3.2768000000000006 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_sec_pss_group_safe8_heading_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Trajectory ID
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_pss_group_safe8_traject_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_pss_group_safe8_ub;
};

/**
 * Signals in message VIMBMid6CanFdFr28.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_ad_nom_a_lgt_req_group_safe_ub;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_sec_a_lgt_lim_req_group_safe_ub;

    /**
     * Safety critical acceleration request from HAD. Safety critical acceleration request from HAD.
     *
     * Range: 0..3840 (-15.0..15.0 m/s^2)
     * Scale: 0.0078125
     * Offset: -15.0
     */
    uint16_t ad_sec_a_lgt_lim_req_group_safe_a_lgt_max_req;

    /**
     * Safety critical acceleration request from HAD. E2E Counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_a_lgt_lim_req_group_safe_cntr;

    /**
     * Safety critical acceleration request from HAD. Safety critical acceleration request from HAD.
     *
     * Range: 0..3840 (-15.0..15.0 m/s^2)
     * Scale: 0.0078125
     * Offset: -15.0
     */
    uint16_t ad_sec_a_lgt_lim_req_group_safe_a_lgt_min_req;

    /**
     * Safety critical acceleration request from HAD. E2E checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t ad_sec_a_lgt_lim_req_group_safe_chks;

    /**
     * Secondary nominal longitudinal acceleration request Nominal acceleration req from HAD.
     *
     * Range: 0..3840 (-15.0..15.0 m/s^2)
     * Scale: 0.0078125
     * Offset: -15.0
     */
    uint16_t sec_ad_nom_a_lgt_req_group_safe_a_lgt_nom_req_max;

    /**
     * Secondary nominal longitudinal acceleration request E2E Counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_ad_nom_a_lgt_req_group_safe_cntr;

    /**
     * Secondary nominal longitudinal acceleration request Nominal acceleration req from HAD.
     *
     * Range: 0..3840 (-15.0..15.0 m/s^2)
     * Scale: 0.0078125
     * Offset: -15.0
     */
    uint16_t sec_ad_nom_a_lgt_req_group_safe_a_lgt_nom_req_min;

    /**
     * Secondary nominal longitudinal acceleration request E2E Checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_ad_nom_a_lgt_req_group_safe_chks;

    /**
     * Secondary nominal longitudinal acceleration request Limit of maximum allowed negative jerk (acceleration rate of change)
     *
     * Range: 0..4000 (-100.0..100.0 m/s^3)
     * Scale: 0.05
     * Offset: -100.0
     */
    uint16_t sec_ad_nom_a_lgt_req_group_safe_neg_lim_for_jerk;

    /**
     * Secondary nominal longitudinal acceleration request Limit of maximum allowed positive jerk (acceleration rate of change)
     *
     * Range: 0..4000 (-100.0..100.0 m/s^3)
     * Scale: 0.05
     * Offset: -100.0
     */
    uint16_t sec_ad_nom_a_lgt_req_group_safe_pos_lim_for_jerk;
};

/**
 * Signals in message VIMBMid6CanFdFr29.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr29_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_ad_whl_lock_req_ub;

    /**
     * Secondary AD request to lock wheels NoReqApplyRel
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_ad_whl_lock_req_no_req_apply_rel;

    /**
     * Secondary AD request to lock wheels Counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_ad_whl_lock_req_cntr;

    /**
     * Secondary AD request to lock wheels Checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_ad_whl_lock_req_chks;
};

/**
 * Signals in message VimbMid6CanFdTimeSynchFr.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_time_synch_fr_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message VIMBPrototypeMid6CanFdFr29.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_prototype_mid6_can_fd_fr29_t {
    /**
     * Used for validating Autosar time synchronization mechanism in SSMB. Time stamp, nano seconds
     *
     * Range: 0..4294967295 (0.0..4294967295.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint32_t sec_mon_ti_sync_msg_ti_stamp_nano_sec;

    /**
     * Used for validating Autosar time synchronization mechanism in SSMB. Time stamp, seconds
     *
     * Range: 0..4294967295 (0.0..4294967295.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint32_t sec_mon_ti_sync_msg_ti_stamp_sec;

    /**
     * Used for validating Autosar time synchronization mechanism in SSMB. Profile VCC checksum
     *
     * Range: 0..255 (0.0..255.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_mon_ti_sync_msg_chks;

    /**
     * Used for validating Autosar time synchronization mechanism in SSMB. Profile VCC counter
     *
     * Range: 0..15 (0.0..15.0 Unitless)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t sec_mon_ti_sync_msg_cntr;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sec_mon_ti_sync_msg_ub;
};

/**
 * Pack message SsmbMid6CanFdCanNmFr.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_t *src_p,
    size_t size);

/**
 * Unpack message SsmbMid6CanFdCanNmFr.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_nm_node_id_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_nm_node_id_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_nm_node_id_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_nm_pni_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_nm_pni_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_nm_pni_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_nm_aw_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_nm_aw_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_nm_aw_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_nm_cs_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_nm_cs_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_nm_cs_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_nm_rmr_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_nm_rmr_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_nm_rmr_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_entrance_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_entrance_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_entrance_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_infotainment_and_hmi_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_infotainment_and_hmi_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_infotainment_and_hmi_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_body_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_body_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_body_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_visibility_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_visibility_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_visibility_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_warning_sounds_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_warning_sounds_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_warning_sounds_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_hazard_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_hazard_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_hazard_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_locking_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_locking_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_locking_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_driverinfo_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_driverinfo_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_driverinfo_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_driverinfo_poll_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_driverinfo_poll_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_driverinfo_poll_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pncgsd_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pncgsd_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pncgsd_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_global_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_global_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_global_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_trailer_caravan_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_trailer_caravan_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_trailer_caravan_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_driving_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_driving_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_driving_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_pre_climatization_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_pre_climatization_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_pre_climatization_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_charging_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_charging_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_charging_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_start_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_start_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_start_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_spare1_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_spare1_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_spare1_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_spare2_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_spare2_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_spare2_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_spare3_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_spare3_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_spare3_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_spare4_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_spare4_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnc_spare4_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnchv_energy_storage_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnchv_energy_storage_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_pnchv_energy_storage_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_vehicle_api_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_vehicle_api_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_vehicle_api_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_brake_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_brake_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_brake_ssmb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_diesel_ssmb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_diesel_ssmb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_can_nm_fr_diesel_ssmb_is_in_range(uint8_t value);

/**
 * Pack message SSMBMid6CanFdFr01.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr01_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr01_t *src_p,
    size_t size);

/**
 * Unpack message SSMBMid6CanFdFr01.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr01_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr01_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr01_ad_sec_steer_sts_safe_group_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr01_ad_sec_steer_sts_safe_group_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr01_ad_sec_steer_sts_safe_group_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr01_ad_sec_steer_sts_safe_group_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr01_ad_sec_steer_sts_safe_group_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr01_ad_sec_steer_sts_safe_group_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr01_ad_sec_steer_sts_safe_group_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr01_ad_sec_steer_sts_safe_group_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr01_ad_sec_steer_sts_safe_group_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr01_ad_sec_steer_sts_safe_group_ad_steer_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr01_ad_sec_steer_sts_safe_group_ad_steer_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr01_ad_sec_steer_sts_safe_group_ad_steer_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr01_ad_sec_steer_sts_safe_group_ad_steer_perf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr01_ad_sec_steer_sts_safe_group_ad_steer_perf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr01_ad_sec_steer_sts_safe_group_ad_steer_perf_is_in_range(uint8_t value);

/**
 * Pack message SSMBMid6CanFdFr02.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr02_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr02_t *src_p,
    size_t size);

/**
 * Unpack message SSMBMid6CanFdFr02.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr02_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr02_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr02_ad_sec_mot_tq_asil_thrshld_excd_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr02_ad_sec_mot_tq_asil_thrshld_excd_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr02_ad_sec_mot_tq_asil_thrshld_excd_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr02_ad_sec_mot_tq_asil_thrshld_excd_thrshld_exceeded_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr02_ad_sec_mot_tq_asil_thrshld_excd_thrshld_exceeded_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr02_ad_sec_mot_tq_asil_thrshld_excd_thrshld_exceeded_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr02_ad_sec_mot_tq_asil_thrshld_excd_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr02_ad_sec_mot_tq_asil_thrshld_excd_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr02_ad_sec_mot_tq_asil_thrshld_excd_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr02_ad_sec_mot_tq_asil_thrshld_excd_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr02_ad_sec_mot_tq_asil_thrshld_excd_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr02_ad_sec_mot_tq_asil_thrshld_excd_chks_is_in_range(uint8_t value);

/**
 * Pack message SSMBMid6CanFdFr03.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_t *src_p,
    size_t size);

/**
 * Unpack message SSMBMid6CanFdFr03.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_steer_mot_tq_steer_mot_tq_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_steer_mot_tq_steer_mot_tq_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_steer_mot_tq_steer_mot_tq_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_steer_mot_tq_steer_mot_tq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_steer_mot_tq_steer_mot_tq_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_steer_mot_tq_steer_mot_tq_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_steer_mot_tq_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_steer_mot_tq_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_steer_mot_tq_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_pose_mon_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_pose_mon_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_pose_mon_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_pose_mon_safe_safe_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_pose_mon_safe_safe_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_pose_mon_safe_safe_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_pose_mon_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_pose_mon_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_pose_mon_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_pose_mon_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_pose_mon_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_pose_mon_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_pose_mon_safe_yaw_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_pose_mon_safe_yaw_err_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_pose_mon_safe_yaw_err_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_pose_mon_safe_lat_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_pose_mon_safe_lat_err_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_pose_mon_safe_lat_err_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_pose_mon_safe_lgt_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_pose_mon_safe_lgt_err_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_pose_mon_safe_lgt_err_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_whl_lock_sts_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_whl_lock_sts_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_whl_lock_sts_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_whl_lock_sts_degraded_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_whl_lock_sts_degraded_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_whl_lock_sts_degraded_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_whl_lock_sts_lock_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_whl_lock_sts_lock_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_whl_lock_sts_lock_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_whl_lock_sts_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_whl_lock_sts_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_whl_lock_sts_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_whl_lock_sts_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_whl_lock_sts_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_sec_whl_lock_sts_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_ssmb_degraded_ssmb_degraded_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_ssmb_degraded_ssmb_degraded_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_ssmb_degraded_ssmb_degraded_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_ssmb_degradedcntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_ssmb_degradedcntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_ssmb_degradedcntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_ssmb_degradedchks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_ssmb_degradedchks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_ssmb_degradedchks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_ssmb_degraded_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_ssmb_degraded_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr03_ssmb_degraded_ub_is_in_range(uint8_t value);

/**
 * Pack message SSMBMid6CanFdFr04.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr04_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr04_t *src_p,
    size_t size);

/**
 * Unpack message SSMBMid6CanFdFr04.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr04_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr04_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr04_brk_degraded_rdnt_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr04_brk_degraded_rdnt_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr04_brk_degraded_rdnt_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr04_brk_degraded_rdnt_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr04_brk_degraded_rdnt_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr04_brk_degraded_rdnt_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr04_brk_degraded_rdnt_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr04_brk_degraded_rdnt_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr04_brk_degraded_rdnt_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr04_brk_degraded_rdnt_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr04_brk_degraded_rdnt_sts_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr04_brk_degraded_rdnt_sts_is_in_range(uint16_t value);

/**
 * Pack message SSMBMid6CanFdFr05.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_t *src_p,
    size_t size);

/**
 * Unpack message SSMBMid6CanFdFr05.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_ad_sec_whl_ag_estimd_group_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_ad_sec_whl_ag_estimd_group_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_ad_sec_whl_ag_estimd_group_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_ad_sec_whl_ag_estimd_group_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_ad_sec_whl_ag_estimd_group_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_ad_sec_whl_ag_estimd_group_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_ad_sec_whl_ag_estimd_group_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_ad_sec_whl_ag_estimd_group_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_ad_sec_whl_ag_estimd_group_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_ad_sec_whl_ag_estimd_group_safe_whl_ag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_ad_sec_whl_ag_estimd_group_safe_whl_ag_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_ad_sec_whl_ag_estimd_group_safe_whl_ag_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_ad_sec_whl_ag_estimd_group_safe_whl_ag_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_ad_sec_whl_ag_estimd_group_safe_whl_ag_rate_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_ad_sec_whl_ag_estimd_group_safe_whl_ag_rate_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_ad_sec_whl_ag_estimd_group_safe_qf1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_ad_sec_whl_ag_estimd_group_safe_qf1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_ad_sec_whl_ag_estimd_group_safe_qf1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_le_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_le_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_le_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_ri_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_ri_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_ri_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_le_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_le_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_le_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_ri_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_ri_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_ri_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr05_sec_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_ri_is_in_range(uint8_t value);

/**
 * Pack message SSMBMid6CanFdFr06.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_t *src_p,
    size_t size);

/**
 * Unpack message SSMBMid6CanFdFr06.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_min_max_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_min_max_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_min_max_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_min_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_min_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_nom_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_nom_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_nom_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_nom_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_nom_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lat_data_raw_safe_nom_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_nom_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_nom_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_nom_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_min_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_min_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_nom_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_nom_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_nom_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_min_max_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_min_max_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_min_max_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_whl_rot_dir_re_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_whl_rot_dir_re_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_whl_rot_dir_re_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_a_lgt_data_raw_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_whl_rot_dir_re_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_whl_rot_dir_re_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_whl_rot_dir_re_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_whl_rot_dir_re_safe_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_whl_rot_dir_re_safe_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_whl_rot_dir_re_safe_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_whl_rot_dir_re_safe_le_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_whl_rot_dir_re_safe_le_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_whl_rot_dir_re_safe_le_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_whl_rot_dir_re_safe_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_whl_rot_dir_re_safe_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_whl_rot_dir_re_safe_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_whl_rot_dir_re_safe_ri_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_whl_rot_dir_re_safe_ri_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_whl_rot_dir_re_safe_ri_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_whl_rot_dir_re_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_whl_rot_dir_re_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_whl_rot_dir_re_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_frnt_axle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_frnt_axle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_frnt_axle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_re_axle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_re_axle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_re_axle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_rel_pitch_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_rel_pitch_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_rel_pitch_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_rel_rol_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_rel_rol_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_rel_rol_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_rel_pitch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_rel_pitch_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_rel_pitch_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_rel_roll_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_rel_roll_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_rel_roll_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_intv_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_intv_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_axle_slip_sts_and_rel_ag_intv_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_nom_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_nom_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_nom_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_min_max_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_min_max_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_min_max_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_max_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_max_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_min_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_min_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_nom_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_nom_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_v_lat_safe_nom_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_nom_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_nom_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_nom_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_min_max_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_min_max_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_min_max_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_max_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_max_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_min_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_min_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_nom_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_nom_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr06_sec_yaw_rate_safe_nom_is_in_range(int16_t value);

/**
 * Pack message SSMBMid6CanFdFr07.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_t *src_p,
    size_t size);

/**
 * Unpack message SSMBMid6CanFdFr07.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_mov_dir_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_mov_dir_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_mov_dir_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_min_max_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_min_max_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_min_max_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_mov_dir_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_mov_dir_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_mov_dir_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_min_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_min_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_nom_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_nom_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_nom_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_nom_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_nom_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr07_sec_veh_spd_group_safe_nom_is_in_range(uint16_t value);

/**
 * Pack message SSMBMid6CanFdFr08.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_t *src_p,
    size_t size);

/**
 * Unpack message SSMBMid6CanFdFr08.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_frnt_safe_ri_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_frnt_safe_ri_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_frnt_safe_ri_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_frnt_safe_le_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_frnt_safe_le_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_frnt_safe_le_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_frnt_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_frnt_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_frnt_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_frnt_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_frnt_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_frnt_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_frnt_safe_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_frnt_safe_le_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_frnt_safe_le_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_frnt_safe_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_frnt_safe_ri_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_frnt_safe_ri_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_re_safe_ri_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_re_safe_ri_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_re_safe_ri_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_re_safe_le_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_re_safe_le_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_re_safe_le_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_re_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_re_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_re_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_re_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_re_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_re_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_re_safe_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_re_safe_le_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_re_safe_le_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_re_safe_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_re_safe_ri_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_re_safe_ri_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_frnt_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_frnt_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_frnt_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_re_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_re_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_whl_ag_spd_re_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_nom_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_nom_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_nom_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_veh_m_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_veh_m_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_veh_m_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_veh_m_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_veh_m_min_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_veh_m_min_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_veh_m_nom_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_veh_m_nom_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_veh_m_nom_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_safe_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_safe_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_safe_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr08_sec_veh_m_safe_ub_is_in_range(uint8_t value);

/**
 * Pack message SSMBMid6CanFdFr11.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_t *src_p,
    size_t size);

/**
 * Unpack message SSMBMid6CanFdFr11.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_whl_ag_rate_lim_estimd_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_whl_ag_rate_lim_estimd_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_whl_ag_rate_lim_estimd_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_safe_stop_actv_group_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_safe_stop_actv_group_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_safe_stop_actv_group_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_safe_stop_actv_group_safe_platform_safe_stop_actv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_safe_stop_actv_group_safe_platform_safe_stop_actv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_safe_stop_actv_group_safe_platform_safe_stop_actv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_safe_stop_actv_group_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_safe_stop_actv_group_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_safe_stop_actv_group_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_safe_stop_actv_group_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_safe_stop_actv_group_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_safe_stop_actv_group_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_sec_max_a_lat_estimd_group_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_sec_max_a_lat_estimd_group_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_sec_max_a_lat_estimd_group_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_sec_max_a_lat_estimd_group_acceleration_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_sec_max_a_lat_estimd_group_acceleration_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_sec_max_a_lat_estimd_group_acceleration_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_sec_max_a_lat_estimd_group_jerk_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_sec_max_a_lat_estimd_group_jerk_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_sec_max_a_lat_estimd_group_jerk_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_whl_ag_rate_lim_estimd_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_whl_ag_rate_lim_estimd_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_whl_ag_rate_lim_estimd_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_whl_ag_rate_lim_estimd_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_whl_ag_rate_lim_estimd_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_whl_ag_rate_lim_estimd_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_whl_ag_rate_lim_estimd_safe_ad_whl_ag_rate1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_whl_ag_rate_lim_estimd_safe_ad_whl_ag_rate1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_ssmb_mid6_can_fd_fr11_ad_sec_whl_ag_rate_lim_estimd_safe_ad_whl_ag_rate1_is_in_range(uint16_t value);

/**
 * Pack message VimbMid6CanFdCanNmFr.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_t *src_p,
    size_t size);

/**
 * Unpack message VimbMid6CanFdCanNmFr.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_nm_node_id_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_nm_node_id_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_nm_node_id_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_nm_pni_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_nm_pni_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_nm_pni_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_nm_aw_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_nm_aw_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_nm_aw_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_nm_cs_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_nm_cs_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_nm_cs_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_nm_rmr_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_nm_rmr_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_nm_rmr_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_entrance_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_entrance_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_entrance_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_infotainment_and_hmi_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_infotainment_and_hmi_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_infotainment_and_hmi_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_body_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_body_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_body_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_visibility_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_visibility_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_visibility_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_warning_sounds_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_warning_sounds_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_warning_sounds_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_hazard_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_hazard_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_hazard_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_locking_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_locking_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_locking_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_driverinfo_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_driverinfo_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_driverinfo_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_driverinfo_poll_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_driverinfo_poll_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_driverinfo_poll_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pncgsd_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pncgsd_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pncgsd_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_global_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_global_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_global_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_trailer_caravan_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_trailer_caravan_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_trailer_caravan_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_driving_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_driving_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_driving_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_pre_climatization_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_pre_climatization_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_pre_climatization_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_charging_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_charging_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_charging_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_start_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_start_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_start_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_spare1_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_spare1_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_spare1_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_spare2_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_spare2_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_spare2_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_spare3_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_spare3_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_spare3_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_spare4_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_spare4_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnc_spare4_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnchv_energy_storage_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnchv_energy_storage_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_pnchv_energy_storage_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_vehicle_api_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_vehicle_api_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_vehicle_api_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_brake_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_brake_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_brake_vimb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_diesel_vimb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_diesel_vimb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_can_nm_fr_diesel_vimb_is_in_range(uint8_t value);

/**
 * Pack message VIMBMid6CanFdFr01.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_t *src_p,
    size_t size);

/**
 * Unpack message VIMBMid6CanFdFr01.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_sds_flt_mgr_sts_rdnt_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_sds_flt_mgr_sts_rdnt_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_sds_flt_mgr_sts_rdnt_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_ad_sec_safe_stop_req_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_ad_sec_safe_stop_req_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_ad_sec_safe_stop_req_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_ad_sec_safe_stop_req_safe_safe_stop_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_ad_sec_safe_stop_req_safe_safe_stop_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_ad_sec_safe_stop_req_safe_safe_stop_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_ad_sec_safe_stop_req_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_ad_sec_safe_stop_req_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_ad_sec_safe_stop_req_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_ad_sec_safe_stop_req_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_ad_sec_safe_stop_req_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_ad_sec_safe_stop_req_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_sds_flt_mgr_sts_rdnt_sds_flt_mgr_sts_rdnt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_sds_flt_mgr_sts_rdnt_sds_flt_mgr_sts_rdnt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_sds_flt_mgr_sts_rdnt_sds_flt_mgr_sts_rdnt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_sds_flt_mgr_sts_rdnt_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_sds_flt_mgr_sts_rdnt_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_sds_flt_mgr_sts_rdnt_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_sds_flt_mgr_sts_rdnt_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_sds_flt_mgr_sts_rdnt_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr01_sds_flt_mgr_sts_rdnt_chks_is_in_range(uint8_t value);

/**
 * Pack message VIMBMid6CanFdFr03.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_t *src_p,
    size_t size);

/**
 * Unpack message VIMBMid6CanFdFr03.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_chks_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_chks_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_ax_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_ax_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_ay_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_ay_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_ay_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_az_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_az_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_az_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_data_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_data_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_data_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pitch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pitch_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pitch_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pitch_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pitch_rate_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pitch_rate_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pos_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pos_x_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pos_x_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pos_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pos_y_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pos_y_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_roll_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_roll_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_roll_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_roll_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_roll_rate_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_roll_rate_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_ti_stamp_nano_sec_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_ti_stamp_nano_sec_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_ti_stamp_nano_sec_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_ti_stamp_sec_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_ti_stamp_sec_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_ti_stamp_sec_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_yaw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_yaw_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_yaw_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_yaw_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_yaw_rate_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_yaw_rate_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_ax_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_ax_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_ax_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_ay_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_ay_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_ay_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_az_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_az_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_az_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pitch_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pitch_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pitch_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pitch_rate_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pitch_rate_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pitch_rate_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pos_x_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pos_x_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pos_x_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pos_y_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pos_y_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_pos_y_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_roll_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_roll_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_roll_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_roll_rate_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_roll_rate_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_roll_rate_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_vx_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_vx_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_vx_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_vy_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_vy_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_vy_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_yaw_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_yaw_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_yaw_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_yaw_rate_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_yaw_rate_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_yaw_rate_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr03_ad_sec_pose_ub_is_in_range(uint8_t value);

/**
 * Pack message VIMBMid6CanFdFr04.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_t *src_p,
    size_t size);

/**
 * Unpack message VIMBMid6CanFdFr04.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_sec_road_gradientl_from_ad_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_sec_road_gradientl_from_ad_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_sec_road_gradientl_from_ad_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_sec_road_gradientl_from_ad_incln_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_sec_road_gradientl_from_ad_incln_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_sec_road_gradientl_from_ad_incln_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_sec_road_gradientl_from_ad_banking_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_sec_road_gradientl_from_ad_banking_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_sec_road_gradientl_from_ad_banking_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_sec_road_gradientl_from_ad_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_sec_road_gradientl_from_ad_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_sec_road_gradientl_from_ad_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_sec_road_gradientl_from_ad_banking_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_sec_road_gradientl_from_ad_banking_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_sec_road_gradientl_from_ad_banking_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_sec_road_gradientl_from_ad_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_sec_road_gradientl_from_ad_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_sec_road_gradientl_from_ad_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_sec_road_gradientl_from_ad_incln_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_sec_road_gradientl_from_ad_incln_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr04_sec_road_gradientl_from_ad_incln_is_in_range(int16_t value);

/**
 * Pack message VIMBMid6CanFdFr14.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr14_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr14_t *src_p,
    size_t size);

/**
 * Unpack message VIMBMid6CanFdFr14.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr14_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr14_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr14_ad_sec_whl_ag_req_group_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr14_ad_sec_whl_ag_req_group_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr14_ad_sec_whl_ag_req_group_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr14_ad_sec_whl_ag_req_group_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr14_ad_sec_whl_ag_req_group_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr14_ad_sec_whl_ag_req_group_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr14_ad_sec_whl_ag_req_group_safe_whl_ag_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr14_ad_sec_whl_ag_req_group_safe_whl_ag_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr14_ad_sec_whl_ag_req_group_safe_whl_ag_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr14_ad_sec_whl_ag_req_group_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr14_ad_sec_whl_ag_req_group_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr14_ad_sec_whl_ag_req_group_safe_chks_is_in_range(uint8_t value);

/**
 * Pack message VIMBMid6CanFdFr19.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_t *src_p,
    size_t size);

/**
 * Unpack message VIMBMid6CanFdFr19.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_chks_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_chks_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_data_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_data_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_data_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_delta_t_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_delta_t_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_delta_t_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_delta_t_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_delta_t_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_delta_t_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_delta_x_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_delta_x_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_delta_x_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_delta_x_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_delta_x_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_delta_x_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_delta_y_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_delta_y_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_delta_y_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_delta_y_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_delta_y_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_delta_y_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_heading_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_heading_pos1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_heading_pos1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_heading_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_heading_pos2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_heading_pos2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_init_heading_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_init_heading_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_init_heading_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_init_pos_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_init_pos_x_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_init_pos_x_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_init_pos_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_init_pos_y_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_init_pos_y_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_ti_stamp_nano_sec_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_ti_stamp_nano_sec_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_ti_stamp_nano_sec_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_ti_stamp_sec_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_ti_stamp_sec_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_ti_stamp_sec_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_traject_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_traject_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_traject_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr19_ad_sec_pss_group_safe0_ub_is_in_range(uint8_t value);

/**
 * Pack message VIMBMid6CanFdFr20.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_t *src_p,
    size_t size);

/**
 * Unpack message VIMBMid6CanFdFr20.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_chks_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_chks_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_data_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_data_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_data_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_t_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_t_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_t_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_t_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_t_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_t_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_t_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_t_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_t_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_t_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_t_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_t_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_t_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_t_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_t_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_t_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_t_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_t_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_x_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_x_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_x_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_x_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_x_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_x_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_x_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_x_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_x_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_x_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_x_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_x_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_x_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_x_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_x_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_x_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_x_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_x_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_y_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_y_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_y_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_y_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_y_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_y_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_y_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_y_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_y_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_y_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_y_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_y_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_y_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_y_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_y_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_y_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_y_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_delta_y_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_heading_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_heading_pos1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_heading_pos1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_heading_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_heading_pos2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_heading_pos2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_heading_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_heading_pos3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_heading_pos3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_heading_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_heading_pos4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_heading_pos4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_heading_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_heading_pos5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_heading_pos5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_heading_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_heading_pos6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_heading_pos6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_traject_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_traject_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_traject_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr20_ad_sec_pss_group_safe1_ub_is_in_range(uint8_t value);

/**
 * Pack message VIMBMid6CanFdFr21.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_t *src_p,
    size_t size);

/**
 * Unpack message VIMBMid6CanFdFr21.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_chks_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_chks_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_data_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_data_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_data_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_t_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_t_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_t_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_t_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_t_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_t_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_t_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_t_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_t_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_t_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_t_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_t_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_t_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_t_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_t_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_t_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_t_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_t_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_x_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_x_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_x_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_x_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_x_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_x_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_x_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_x_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_x_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_x_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_x_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_x_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_x_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_x_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_x_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_x_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_x_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_x_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_y_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_y_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_y_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_y_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_y_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_y_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_y_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_y_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_y_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_y_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_y_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_y_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_y_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_y_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_y_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_y_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_y_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_delta_y_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_heading_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_heading_pos1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_heading_pos1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_heading_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_heading_pos2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_heading_pos2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_heading_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_heading_pos3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_heading_pos3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_heading_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_heading_pos4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_heading_pos4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_heading_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_heading_pos5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_heading_pos5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_heading_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_heading_pos6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_heading_pos6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_traject_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_traject_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_traject_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr21_ad_sec_pss_group_safe2_ub_is_in_range(uint8_t value);

/**
 * Pack message VIMBMid6CanFdFr22.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_t *src_p,
    size_t size);

/**
 * Unpack message VIMBMid6CanFdFr22.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_chks_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_chks_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_data_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_data_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_data_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_t_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_t_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_t_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_t_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_t_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_t_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_t_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_t_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_t_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_t_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_t_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_t_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_t_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_t_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_t_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_t_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_t_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_t_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_x_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_x_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_x_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_x_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_x_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_x_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_x_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_x_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_x_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_x_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_x_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_x_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_x_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_x_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_x_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_x_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_x_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_x_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_y_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_y_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_y_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_y_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_y_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_y_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_y_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_y_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_y_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_y_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_y_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_y_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_y_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_y_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_y_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_y_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_y_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_delta_y_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_heading_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_heading_pos1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_heading_pos1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_heading_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_heading_pos2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_heading_pos2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_heading_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_heading_pos3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_heading_pos3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_heading_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_heading_pos4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_heading_pos4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_heading_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_heading_pos5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_heading_pos5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_heading_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_heading_pos6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_heading_pos6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_traject_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_traject_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_traject_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr22_ad_sec_pss_group_safe3_ub_is_in_range(uint8_t value);

/**
 * Pack message VIMBMid6CanFdFr23.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_t *src_p,
    size_t size);

/**
 * Unpack message VIMBMid6CanFdFr23.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_chks_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_chks_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_data_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_data_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_data_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_t_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_t_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_t_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_t_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_t_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_t_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_t_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_t_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_t_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_t_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_t_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_t_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_t_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_t_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_t_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_t_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_t_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_t_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_x_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_x_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_x_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_x_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_x_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_x_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_x_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_x_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_x_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_x_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_x_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_x_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_x_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_x_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_x_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_x_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_x_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_x_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_y_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_y_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_y_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_y_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_y_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_y_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_y_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_y_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_y_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_y_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_y_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_y_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_y_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_y_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_y_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_y_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_y_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_delta_y_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_heading_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_heading_pos1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_heading_pos1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_heading_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_heading_pos2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_heading_pos2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_heading_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_heading_pos3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_heading_pos3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_heading_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_heading_pos4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_heading_pos4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_heading_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_heading_pos5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_heading_pos5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_heading_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_heading_pos6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_heading_pos6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_traject_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_traject_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_traject_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr23_ad_sec_pss_group_safe4_ub_is_in_range(uint8_t value);

/**
 * Pack message VIMBMid6CanFdFr24.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_t *src_p,
    size_t size);

/**
 * Unpack message VIMBMid6CanFdFr24.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_chks_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_chks_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_data_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_data_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_data_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_t_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_t_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_t_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_t_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_t_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_t_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_t_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_t_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_t_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_t_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_t_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_t_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_t_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_t_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_t_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_t_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_t_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_t_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_x_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_x_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_x_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_x_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_x_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_x_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_x_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_x_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_x_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_x_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_x_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_x_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_x_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_x_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_x_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_x_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_x_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_x_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_y_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_y_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_y_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_y_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_y_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_y_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_y_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_y_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_y_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_y_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_y_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_y_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_y_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_y_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_y_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_y_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_y_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_delta_y_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_heading_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_heading_pos1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_heading_pos1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_heading_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_heading_pos2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_heading_pos2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_heading_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_heading_pos3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_heading_pos3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_heading_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_heading_pos4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_heading_pos4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_heading_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_heading_pos5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_heading_pos5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_heading_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_heading_pos6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_heading_pos6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_traject_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_traject_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_traject_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr24_ad_sec_pss_group_safe5_ub_is_in_range(uint8_t value);

/**
 * Pack message VIMBMid6CanFdFr25.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_t *src_p,
    size_t size);

/**
 * Unpack message VIMBMid6CanFdFr25.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_chks_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_chks_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_data_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_data_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_data_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_t_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_t_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_t_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_t_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_t_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_t_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_t_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_t_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_t_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_t_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_t_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_t_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_t_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_t_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_t_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_t_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_t_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_t_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_x_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_x_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_x_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_x_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_x_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_x_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_x_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_x_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_x_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_x_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_x_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_x_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_x_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_x_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_x_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_x_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_x_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_x_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_y_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_y_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_y_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_y_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_y_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_y_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_y_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_y_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_y_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_y_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_y_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_y_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_y_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_y_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_y_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_y_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_y_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_delta_y_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_heading_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_heading_pos1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_heading_pos1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_heading_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_heading_pos2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_heading_pos2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_heading_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_heading_pos3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_heading_pos3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_heading_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_heading_pos4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_heading_pos4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_heading_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_heading_pos5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_heading_pos5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_heading_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_heading_pos6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_heading_pos6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_traject_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_traject_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_traject_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr25_ad_sec_pss_group_safe6_ub_is_in_range(uint8_t value);

/**
 * Pack message VIMBMid6CanFdFr26.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_t *src_p,
    size_t size);

/**
 * Unpack message VIMBMid6CanFdFr26.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_chks_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_chks_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_data_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_data_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_data_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_t_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_t_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_t_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_t_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_t_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_t_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_t_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_t_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_t_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_t_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_t_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_t_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_t_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_t_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_t_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_t_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_t_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_t_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_x_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_x_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_x_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_x_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_x_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_x_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_x_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_x_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_x_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_x_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_x_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_x_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_x_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_x_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_x_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_x_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_x_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_x_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_y_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_y_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_y_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_y_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_y_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_y_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_y_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_y_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_y_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_y_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_y_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_y_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_y_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_y_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_y_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_y_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_y_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_delta_y_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_heading_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_heading_pos1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_heading_pos1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_heading_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_heading_pos2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_heading_pos2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_heading_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_heading_pos3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_heading_pos3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_heading_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_heading_pos4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_heading_pos4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_heading_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_heading_pos5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_heading_pos5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_heading_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_heading_pos6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_heading_pos6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_traject_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_traject_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_traject_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr26_ad_sec_pss_group_safe7_ub_is_in_range(uint8_t value);

/**
 * Pack message VIMBMid6CanFdFr27.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_t *src_p,
    size_t size);

/**
 * Unpack message VIMBMid6CanFdFr27.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_chks_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_chks_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_data_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_data_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_data_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_t_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_t_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_t_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_t_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_t_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_t_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_t_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_t_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_t_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_t_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_t_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_t_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_t_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_t_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_t_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_t_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_t_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_t_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_x_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_x_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_x_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_x_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_x_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_x_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_x_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_x_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_x_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_x_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_x_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_x_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_x_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_x_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_x_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_x_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_x_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_x_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_y_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_y_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_y_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_y_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_y_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_y_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_y_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_y_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_y_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_y_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_y_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_y_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_y_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_y_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_y_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_y_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_y_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_delta_y_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_heading_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_heading_pos1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_heading_pos1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_heading_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_heading_pos2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_heading_pos2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_heading_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_heading_pos3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_heading_pos3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_heading_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_heading_pos4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_heading_pos4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_heading_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_heading_pos5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_heading_pos5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_heading_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_heading_pos6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_heading_pos6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_traject_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_traject_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_traject_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr27_ad_sec_pss_group_safe8_ub_is_in_range(uint8_t value);

/**
 * Pack message VIMBMid6CanFdFr28.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_t *src_p,
    size_t size);

/**
 * Unpack message VIMBMid6CanFdFr28.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_sec_ad_nom_a_lgt_req_group_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_sec_ad_nom_a_lgt_req_group_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_sec_ad_nom_a_lgt_req_group_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_ad_sec_a_lgt_lim_req_group_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_ad_sec_a_lgt_lim_req_group_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_ad_sec_a_lgt_lim_req_group_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_ad_sec_a_lgt_lim_req_group_safe_a_lgt_max_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_ad_sec_a_lgt_lim_req_group_safe_a_lgt_max_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_ad_sec_a_lgt_lim_req_group_safe_a_lgt_max_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_ad_sec_a_lgt_lim_req_group_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_ad_sec_a_lgt_lim_req_group_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_ad_sec_a_lgt_lim_req_group_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_ad_sec_a_lgt_lim_req_group_safe_a_lgt_min_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_ad_sec_a_lgt_lim_req_group_safe_a_lgt_min_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_ad_sec_a_lgt_lim_req_group_safe_a_lgt_min_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_ad_sec_a_lgt_lim_req_group_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_ad_sec_a_lgt_lim_req_group_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_ad_sec_a_lgt_lim_req_group_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_sec_ad_nom_a_lgt_req_group_safe_a_lgt_nom_req_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_sec_ad_nom_a_lgt_req_group_safe_a_lgt_nom_req_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_sec_ad_nom_a_lgt_req_group_safe_a_lgt_nom_req_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_sec_ad_nom_a_lgt_req_group_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_sec_ad_nom_a_lgt_req_group_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_sec_ad_nom_a_lgt_req_group_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_sec_ad_nom_a_lgt_req_group_safe_a_lgt_nom_req_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_sec_ad_nom_a_lgt_req_group_safe_a_lgt_nom_req_min_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_sec_ad_nom_a_lgt_req_group_safe_a_lgt_nom_req_min_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_sec_ad_nom_a_lgt_req_group_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_sec_ad_nom_a_lgt_req_group_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_sec_ad_nom_a_lgt_req_group_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_sec_ad_nom_a_lgt_req_group_safe_neg_lim_for_jerk_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_sec_ad_nom_a_lgt_req_group_safe_neg_lim_for_jerk_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_sec_ad_nom_a_lgt_req_group_safe_neg_lim_for_jerk_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_sec_ad_nom_a_lgt_req_group_safe_pos_lim_for_jerk_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_sec_ad_nom_a_lgt_req_group_safe_pos_lim_for_jerk_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr28_sec_ad_nom_a_lgt_req_group_safe_pos_lim_for_jerk_is_in_range(uint16_t value);

/**
 * Pack message VIMBMid6CanFdFr29.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr29_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr29_t *src_p,
    size_t size);

/**
 * Unpack message VIMBMid6CanFdFr29.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr29_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr29_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr29_sec_ad_whl_lock_req_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr29_sec_ad_whl_lock_req_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr29_sec_ad_whl_lock_req_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr29_sec_ad_whl_lock_req_no_req_apply_rel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr29_sec_ad_whl_lock_req_no_req_apply_rel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr29_sec_ad_whl_lock_req_no_req_apply_rel_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr29_sec_ad_whl_lock_req_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr29_sec_ad_whl_lock_req_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr29_sec_ad_whl_lock_req_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr29_sec_ad_whl_lock_req_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr29_sec_ad_whl_lock_req_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_fr29_sec_ad_whl_lock_req_chks_is_in_range(uint8_t value);

/**
 * Pack message VimbMid6CanFdTimeSynchFr.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_time_synch_fr_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_time_synch_fr_t *src_p,
    size_t size);

/**
 * Unpack message VimbMid6CanFdTimeSynchFr.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_time_synch_fr_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_mid6_can_fd_time_synch_fr_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message VIMBPrototypeMid6CanFdFr29.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_prototype_mid6_can_fd_fr29_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_prototype_mid6_can_fd_fr29_t *src_p,
    size_t size);

/**
 * Unpack message VIMBPrototypeMid6CanFdFr29.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_prototype_mid6_can_fd_fr29_unpack(
    struct spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_prototype_mid6_can_fd_fr29_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_prototype_mid6_can_fd_fr29_sec_mon_ti_sync_msg_ti_stamp_nano_sec_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_prototype_mid6_can_fd_fr29_sec_mon_ti_sync_msg_ti_stamp_nano_sec_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_prototype_mid6_can_fd_fr29_sec_mon_ti_sync_msg_ti_stamp_nano_sec_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_prototype_mid6_can_fd_fr29_sec_mon_ti_sync_msg_ti_stamp_sec_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_prototype_mid6_can_fd_fr29_sec_mon_ti_sync_msg_ti_stamp_sec_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_prototype_mid6_can_fd_fr29_sec_mon_ti_sync_msg_ti_stamp_sec_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_prototype_mid6_can_fd_fr29_sec_mon_ti_sync_msg_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_prototype_mid6_can_fd_fr29_sec_mon_ti_sync_msg_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_prototype_mid6_can_fd_fr29_sec_mon_ti_sync_msg_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_prototype_mid6_can_fd_fr29_sec_mon_ti_sync_msg_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_prototype_mid6_can_fd_fr29_sec_mon_ti_sync_msg_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_prototype_mid6_can_fd_fr29_sec_mon_ti_sync_msg_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_prototype_mid6_can_fd_fr29_sec_mon_ti_sync_msg_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_prototype_mid6_can_fd_fr29_sec_mon_ti_sync_msg_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid6_canfd_cfg_210226_prototype_vimb_prototype_mid6_can_fd_fr29_sec_mon_ti_sync_msg_ub_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
