/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 38.0.2 Thu Apr 20 10:44:03 2023.
 */

#ifndef SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_H
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_CAN_NM_FR_FRAME_ID (0x505u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR01_FRAME_ID (0x14u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR02_FRAME_ID (0x2bu)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_FRAME_ID (0x20u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_FRAME_ID (0x15u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR05_FRAME_ID (0x34u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR06_FRAME_ID (0x3au)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR07_FRAME_ID (0x101u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_CAN_NM_FR_FRAME_ID (0x506u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR02_FRAME_ID (0x21u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR03_FRAME_ID (0x41u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR04_FRAME_ID (0x44u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR05_FRAME_ID (0x48u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR06_FRAME_ID (0x52u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR07_FRAME_ID (0x54u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR08_FRAME_ID (0x58u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR09_FRAME_ID (0x62u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR10_FRAME_ID (0x64u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR11_FRAME_ID (0x68u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR12_FRAME_ID (0x22u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR13_FRAME_ID (0x3cu)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_TIME_SYNCH_FR_FRAME_ID (0x35u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_PROTOTYPE_MID5_CAN_FD_FR13_FRAME_ID (0x28u)

/* Frame lengths in bytes. */
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_CAN_NM_FR_LENGTH (8u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR01_LENGTH (20u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR02_LENGTH (8u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_LENGTH (64u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_LENGTH (20u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR05_LENGTH (16u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR06_LENGTH (20u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR07_LENGTH (8u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_CAN_NM_FR_LENGTH (8u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR02_LENGTH (64u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR03_LENGTH (48u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR04_LENGTH (64u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR05_LENGTH (64u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR06_LENGTH (64u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR07_LENGTH (64u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR08_LENGTH (64u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR09_LENGTH (64u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR10_LENGTH (64u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR11_LENGTH (64u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR12_LENGTH (20u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR13_LENGTH (8u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_TIME_SYNCH_FR_LENGTH (8u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_PROTOTYPE_MID5_CAN_FD_FR13_LENGTH (12u)

/* Extended or standard frame types. */
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_CAN_NM_FR_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR01_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR02_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR05_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR06_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR07_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_CAN_NM_FR_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR02_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR03_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR04_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR05_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR06_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR07_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR08_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR09_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR10_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR11_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR12_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR13_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_TIME_SYNCH_FR_IS_EXTENDED (0)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_PROTOTYPE_MID5_CAN_FD_FR13_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR01_CYCLE_TIME_MS (5u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR02_CYCLE_TIME_MS (10u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_CYCLE_TIME_MS (10u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_CYCLE_TIME_MS (10u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR05_CYCLE_TIME_MS (20u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR06_CYCLE_TIME_MS (25u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR07_CYCLE_TIME_MS (160u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR02_CYCLE_TIME_MS (10u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR03_CYCLE_TIME_MS (90u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR04_CYCLE_TIME_MS (90u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR05_CYCLE_TIME_MS (90u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR06_CYCLE_TIME_MS (90u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR07_CYCLE_TIME_MS (90u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR08_CYCLE_TIME_MS (90u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR09_CYCLE_TIME_MS (90u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR10_CYCLE_TIME_MS (90u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR11_CYCLE_TIME_MS (90u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR12_CYCLE_TIME_MS (10u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR13_CYCLE_TIME_MS (60u)

/* Signal choices. */
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR01_PINION_STEER_AG1_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR01_PINION_STEER_AG1_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR01_PINION_STEER_AG1_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR01_PINION_STEER_AG1_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR01_PINION_STEER_AG_SPD1_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR01_PINION_STEER_AG_SPD1_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR01_PINION_STEER_AG_SPD1_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR01_PINION_STEER_AG_SPD1_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR02_AD_PRIM_MOT_TQ_ASIL_THRSHLD_EXCD_THRSHLD_EXCEEDED_ON_OFF1_OFF_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR02_AD_PRIM_MOT_TQ_ASIL_THRSHLD_EXCD_THRSHLD_EXCEEDED_ON_OFF1_ON_CHOICE (1u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR02_PRIM_POSE_MON_SAFE_SAFE_QF_SAFE_QF_UKWN_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR02_PRIM_POSE_MON_SAFE_SAFE_QF_SAFE_QF_NO_INTGRTY_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR02_PRIM_POSE_MON_SAFE_SAFE_QF_SAFE_QF_INTGRTY_CMPRMD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR02_PRIM_POSE_MON_SAFE_SAFE_QF_SAFE_QF_DATA_INTGRTY_OK_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_AD_PRIM_WHL_AG_ESTIMD_GROUP_SAFE_QF1_QF1_DEV_OF_DATA_UNDEFD_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_AD_PRIM_WHL_AG_ESTIMD_GROUP_SAFE_QF1_QF1_DATA_TMP_UNDEFD_AND_EVLN_IN_PROGS_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_AD_PRIM_WHL_AG_ESTIMD_GROUP_SAFE_QF1_QF1_DEV_OF_DATA_NOT_WITHIN_RNG_ALLWD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_AD_PRIM_WHL_AG_ESTIMD_GROUP_SAFE_QF1_QF1_DATA_CALCD_WITH_DEV_DEFD_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_A_LAT_DATA_RAW_SAFE_NOM_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_A_LAT_DATA_RAW_SAFE_NOM_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_A_LAT_DATA_RAW_SAFE_NOM_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_A_LAT_DATA_RAW_SAFE_NOM_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_A_LAT_DATA_RAW_SAFE_MIN_MAX_QF_SAFE_QF_UKWN_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_A_LAT_DATA_RAW_SAFE_MIN_MAX_QF_SAFE_QF_NO_INTGRTY_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_A_LAT_DATA_RAW_SAFE_MIN_MAX_QF_SAFE_QF_INTGRTY_CMPRMD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_A_LAT_DATA_RAW_SAFE_MIN_MAX_QF_SAFE_QF_DATA_INTGRTY_OK_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_AXLE_SLIP_STS_AND_REL_AG_FRNT_AXLE_SLIP_STS_ERR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_AXLE_SLIP_STS_AND_REL_AG_FRNT_AXLE_SLIP_STS_NO_INFO_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_AXLE_SLIP_STS_AND_REL_AG_FRNT_AXLE_SLIP_STS_NOT_SLIP_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_AXLE_SLIP_STS_AND_REL_AG_FRNT_AXLE_SLIP_STS_SLIP_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_AXLE_SLIP_STS_AND_REL_AG_RE_AXLE_SLIP_STS_ERR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_AXLE_SLIP_STS_AND_REL_AG_RE_AXLE_SLIP_STS_NO_INFO_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_AXLE_SLIP_STS_AND_REL_AG_RE_AXLE_SLIP_STS_NOT_SLIP_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_AXLE_SLIP_STS_AND_REL_AG_RE_AXLE_SLIP_STS_SLIP_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_AXLE_SLIP_STS_AND_REL_AG_REL_PITCH_QF_QLY2_FLT_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_AXLE_SLIP_STS_AND_REL_AG_REL_PITCH_QF_QLY2_NO_INFO_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_AXLE_SLIP_STS_AND_REL_AG_REL_PITCH_QF_QLY2_VLD_CHOICE (2u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_AXLE_SLIP_STS_AND_REL_AG_REL_ROL_QF_QLY2_FLT_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_AXLE_SLIP_STS_AND_REL_AG_REL_ROL_QF_QLY2_NO_INFO_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_AXLE_SLIP_STS_AND_REL_AG_REL_ROL_QF_QLY2_VLD_CHOICE (2u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_AXLE_SLIP_STS_AND_REL_AG_INTV_STS_INTV_STS_ERR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_AXLE_SLIP_STS_AND_REL_AG_INTV_STS_INTV_STS_NO_INFO_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_AXLE_SLIP_STS_AND_REL_AG_INTV_STS_INTV_STS_NO_INTV_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_AXLE_SLIP_STS_AND_REL_AG_INTV_STS_INTV_STS_INTV_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_YAW_RATE_SAFE_MIN_MAX_QF_SAFE_QF_UKWN_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_YAW_RATE_SAFE_MIN_MAX_QF_SAFE_QF_NO_INTGRTY_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_YAW_RATE_SAFE_MIN_MAX_QF_SAFE_QF_INTGRTY_CMPRMD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_YAW_RATE_SAFE_MIN_MAX_QF_SAFE_QF_DATA_INTGRTY_OK_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_YAW_RATE_SAFE_NOM_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_YAW_RATE_SAFE_NOM_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_YAW_RATE_SAFE_NOM_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_YAW_RATE_SAFE_NOM_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_DIR_RE_SAFE1_LE_WHL_ROTL_DIR_STD1_UNDEFD_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_DIR_RE_SAFE1_LE_WHL_ROTL_DIR_STD1_STAND_STILL_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_DIR_RE_SAFE1_LE_WHL_ROTL_DIR_STD1_FWD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_DIR_RE_SAFE1_LE_WHL_ROTL_DIR_STD1_BACKW_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_DIR_RE_SAFE1_LE_QF_QF1_DEV_OF_DATA_UNDEFD_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_DIR_RE_SAFE1_LE_QF_QF1_DATA_TMP_UNDEFD_AND_EVLN_IN_PROGS_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_DIR_RE_SAFE1_LE_QF_QF1_DEV_OF_DATA_NOT_WITHIN_RNG_ALLWD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_DIR_RE_SAFE1_LE_QF_QF1_DATA_CALCD_WITH_DEV_DEFD_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_DIR_RE_SAFE1_RI_WHL_ROTL_DIR_STD1_UNDEFD_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_DIR_RE_SAFE1_RI_WHL_ROTL_DIR_STD1_STAND_STILL_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_DIR_RE_SAFE1_RI_WHL_ROTL_DIR_STD1_FWD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_DIR_RE_SAFE1_RI_WHL_ROTL_DIR_STD1_BACKW_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_DIR_RE_SAFE1_RI_QF_QF1_DEV_OF_DATA_UNDEFD_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_DIR_RE_SAFE1_RI_QF_QF1_DATA_TMP_UNDEFD_AND_EVLN_IN_PROGS_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_DIR_RE_SAFE1_RI_QF_QF1_DEV_OF_DATA_NOT_WITHIN_RNG_ALLWD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_DIR_RE_SAFE1_RI_QF_QF1_DATA_CALCD_WITH_DEV_DEFD_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_FRNT_LE_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_FRNT_LE_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_FRNT_LE_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_FRNT_LE_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_FRNT_RI_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_FRNT_RI_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_FRNT_RI_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_FRNT_RI_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_RE_LE_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_RE_LE_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_RE_LE_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_RE_LE_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_RE_RI_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_RE_RI_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_RE_RI_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_WHL_ROT_TOOTH_CNTR_WHL_ROT_TOOTH_CNTR_RE_RI_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_V_LAT_SAFE_NOM_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_V_LAT_SAFE_NOM_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_V_LAT_SAFE_NOM_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_V_LAT_SAFE_NOM_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_V_LAT_SAFE_MIN_MAX_QF_SAFE_QF_UKWN_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_V_LAT_SAFE_MIN_MAX_QF_SAFE_QF_NO_INTGRTY_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_V_LAT_SAFE_MIN_MAX_QF_SAFE_QF_INTGRTY_CMPRMD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR03_PRIM_V_LAT_SAFE_MIN_MAX_QF_SAFE_QF_DATA_INTGRTY_OK_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_WHL_AG_SPD_FRNT_SAFE_RI_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_WHL_AG_SPD_FRNT_SAFE_RI_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_WHL_AG_SPD_FRNT_SAFE_RI_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_WHL_AG_SPD_FRNT_SAFE_RI_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_WHL_AG_SPD_FRNT_SAFE_LE_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_WHL_AG_SPD_FRNT_SAFE_LE_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_WHL_AG_SPD_FRNT_SAFE_LE_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_WHL_AG_SPD_FRNT_SAFE_LE_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_WHL_AG_SPD_RE_SAFE_RI_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_WHL_AG_SPD_RE_SAFE_RI_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_WHL_AG_SPD_RE_SAFE_RI_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_WHL_AG_SPD_RE_SAFE_RI_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_WHL_AG_SPD_RE_SAFE_LE_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_WHL_AG_SPD_RE_SAFE_LE_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_WHL_AG_SPD_RE_SAFE_LE_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_WHL_AG_SPD_RE_SAFE_LE_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_VEH_M_SAFE_NOM_QF_GEN_QF1_UNDEFIND_DATA_ACCUR_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_VEH_M_SAFE_NOM_QF_GEN_QF1_TMP_UNDEFD_DATA_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_VEH_M_SAFE_NOM_QF_GEN_QF1_DATA_ACCUR_NOT_WITHIN_SPCN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_VEH_M_SAFE_NOM_QF_GEN_QF1_ACCUR_DATA_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_VEH_M_SAFE_SAFE_QF_SAFE_QF_UKWN_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_VEH_M_SAFE_SAFE_QF_SAFE_QF_NO_INTGRTY_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_VEH_M_SAFE_SAFE_QF_SAFE_QF_INTGRTY_CMPRMD_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR04_PRIM_VEH_M_SAFE_SAFE_QF_SAFE_QF_DATA_INTGRTY_OK_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR06_AD_PRIM_SAFE_STOP_ACTV_GROUP_SAFE_PLATFORM_SAFE_STOP_ACTV_NO_YES1_NO_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR06_AD_PRIM_SAFE_STOP_ACTV_GROUP_SAFE_PLATFORM_SAFE_STOP_ACTV_NO_YES1_YES_CHOICE (1u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR06_SSM_DEGRADEDSSMDEGRADED_SSM_DEGRADED_SFTY_CRIT_FLT_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR06_SSM_DEGRADEDSSMDEGRADED_SSM_DEGRADED_SFTY_CRIT_LATENT_FLT_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR06_SSM_DEGRADEDSSMDEGRADED_SSM_DEGRADED_PSS_FLT_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR06_SSM_DEGRADEDSSMDEGRADED_SSM_DEGRADED_NON_SFTY_CRIT_FLT_CHOICE (3u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR06_SSM_DEGRADEDSSMDEGRADED_SSM_DEGRADED_NO_FLT_CHOICE (4u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR07_STEER_MECH_MON_STS_STEER_MECH_MON_STS_UNKNOWN_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR07_STEER_MECH_MON_STS_STEER_MECH_MON_STS_WITHIN_NOM_BOUNDS_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR07_STEER_MECH_MON_STS_STEER_MECH_MON_STS_SMALL_OFFSET_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_SSM_MID5_CAN_FD_FR07_STEER_MECH_MON_STS_STEER_MECH_MON_STS_LARGE_OFFSET_CHOICE (3u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR13_AD_PRIM_SAFE_STOP_REQ_SAFE_SAFE_STOP_REQ_NO_YES1_NO_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR13_AD_PRIM_SAFE_STOP_REQ_SAFE_SAFE_STOP_REQ_NO_YES1_YES_CHOICE (1u)

#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR13_SDS_FLT_MGR_STS_SAFE_SDS_FLT_MGR_STS_SDS_FLT_MGR_STS_NOM_CHOICE (0u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR13_SDS_FLT_MGR_STS_SAFE_SDS_FLT_MGR_STS_SDS_FLT_MGR_STS_RESD_CHOICE (1u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR13_SDS_FLT_MGR_STS_SAFE_SDS_FLT_MGR_STS_SDS_FLT_MGR_STS_MNTN_CHOICE (2u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR13_SDS_FLT_MGR_STS_SAFE_SDS_FLT_MGR_STS_SDS_FLT_MGR_STS_RESD1_CHOICE (3u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR13_SDS_FLT_MGR_STS_SAFE_SDS_FLT_MGR_STS_SDS_FLT_MGR_STS_CMPT_RTRN_CHOICE (4u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR13_SDS_FLT_MGR_STS_SAFE_SDS_FLT_MGR_STS_SDS_FLT_MGR_STS_RESD2_CHOICE (5u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR13_SDS_FLT_MGR_STS_SAFE_SDS_FLT_MGR_STS_SDS_FLT_MGR_STS_SS_CHOICE (6u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR13_SDS_FLT_MGR_STS_SAFE_SDS_FLT_MGR_STS_SDS_FLT_MGR_STS_RESD3_CHOICE (7u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR13_SDS_FLT_MGR_STS_SAFE_SDS_FLT_MGR_STS_SDS_FLT_MGR_STS_SS1_CHOICE (8u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR13_SDS_FLT_MGR_STS_SAFE_SDS_FLT_MGR_STS_SDS_FLT_MGR_STS_RESD4_CHOICE (9u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR13_SDS_FLT_MGR_STS_SAFE_SDS_FLT_MGR_STS_SDS_FLT_MGR_STS_VIMSS_CHOICE (10u)
#define SPA4710_CONFIGURATIONS_SPA3_AD_MID5_CANFD_CFG_210226_PROTOTYPE_VIM_MID5_CAN_FD_FR13_SDS_FLT_MGR_STS_SAFE_SDS_FLT_MGR_STS_SDS_FLT_MGR_STS_RESD5_CHOICE (11u)

/**
 * Signals in message SsmMid5CanFdCanNmFr.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_node_id_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_pni_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_aw_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_cs_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_rmr_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_entrance_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t infotainment_and_hmi_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t body_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t visibility_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t warning_sounds_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t hazard_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_locking_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_driverinfo_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_driverinfo_poll_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pncgsd_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_global_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_trailer_caravan_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_driving_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_pre_climatization_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_charging_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_start_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_spare1_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_spare2_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_spare3_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_spare4_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnchv_energy_storage_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vehicle_api_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_ssm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t diesel_ssm;
};

/**
 * Signals in message SSMMid5CanFdFr01.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pinion_steer_ag_spd1_group_ub;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pinion_steer_ag1_group_ub;

    /**
     * Calculated pinion steer angle at the front steering device Quality factor for PinionSteerAg1
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pinion_steer_ag1_qf;

    /**
     * Calculated pinion steer angle at the front steering device Calculated pinion steer angle at the front steering device
     *
     * Range: -14848..14848 (-14.5..14.5 rad)
     * Scale: 0.0009765625
     * Offset: 0
     */
    int16_t pinion_steer_ag1;

    /**
     * Calculated pinion steer angle speed at the front steering device Quality factor for PinionSteerAgSpd1
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pinion_steer_ag_spd1_qf;

    /**
     * Calculated pinion steer angle speed at the front steering device Calculated pinion steer angle speed at the front steering device
     *
     * Range: -6400..6400 (-50..50 rad/s)
     * Scale: 0.0078125
     * Offset: 0
     */
    int16_t pinion_steer_ag_spd1;
};

/**
 * Signals in message SSMMid5CanFdFr02.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_pose_mon_safe_ub;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_mot_tq_asil_thrshld_excd_ub;

    /**
     *  Boolean stating if the current operation is within the ASIL-D area of the steering system.
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_mot_tq_asil_thrshld_excd_thrshld_exceeded;

    /**
     *  E2E protection
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_mot_tq_asil_thrshld_excd_cntr;

    /**
     *  E2E protection
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_mot_tq_asil_thrshld_excd_chks;

    /**
     * Primary Pose monitoring Checksum
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_pose_mon_safe_chks;

    /**
     * Primary Pose monitoring Yaw Error
     *
     * Range: -128..127 (-0.128..0.127 rad)
     * Scale: 0.001
     * Offset: 0
     */
    int8_t prim_pose_mon_safe_yaw_err;

    /**
     * Primary Pose monitoring Quality factor for Longitudinal, Lateral and Yaw Error
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_pose_mon_safe_safe_qf;

    /**
     * Primary Pose monitoring Counter
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_pose_mon_safe_cntr;

    /**
     * Primary Pose monitoring Lateral Error
     *
     * Range: -512..511 (-2.56..2.555 m)
     * Scale: 0.005
     * Offset: 0
     */
    int16_t prim_pose_mon_safe_lat_err;

    /**
     * Primary Pose monitoring Longitudinal Error
     *
     * Range: -1024..1023 (-5.12..5.115 m)
     * Scale: 0.005
     * Offset: 0
     */
    int16_t prim_pose_mon_safe_lgt_err;
};

/**
 * Signals in message SSMMid5CanFdFr03.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_a_lat_data_raw_safe_ub;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_whl_ag_estimd_group_safe_ub;

    /**
     * AD Wheel angle feedback E2E Counter
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_whl_ag_estimd_group_safe_cntr;

    /**
     * AD Wheel angle feedback E2E Checksum
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_whl_ag_estimd_group_safe_chks;

    /**
     * AD Wheel angle feedback Wheel angle estimate
     *
     * Range: 0..32388 (-0.85..0.85004612 rad)
     * Scale: 5.249e-05
     * Offset: -0.85
     */
    uint16_t ad_prim_whl_ag_estimd_group_safe_whl_ag;

    /**
     * AD Wheel angle feedback Wheel angle rate estimate.
     *
     * Range: 0..28000 (-0.7..0.7 rad/s)
     * Scale: 5e-05
     * Offset: -0.7
     */
    uint16_t ad_prim_whl_ag_estimd_group_safe_whl_ag_rate;

    /**
     * AD Wheel angle feedback Quality Factor of the rack positionÂ¨
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_whl_ag_estimd_group_safe_qf1;

    /**
     * Lateral acceleration estimation (Primary) Quality factor for Nom signal
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_a_lat_data_raw_safe_nom_qf;

    /**
     * Lateral acceleration estimation (Primary) Counter
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_a_lat_data_raw_safe_cntr;

    /**
     * Lateral acceleration estimation (Primary) Checksum
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_a_lat_data_raw_safe_chks;

    /**
     * Lateral acceleration estimation (Primary) Maximum Lateral Acceleration
     *
     * Range: 0..32767 (-16.384..16.383 m/s^2)
     * Scale: 0.001
     * Offset: -16.384
     */
    uint16_t prim_a_lat_data_raw_safe_max;

    /**
     * Lateral acceleration estimation (Primary) Minimum Lateral Acceleration
     *
     * Range: 0..32767 (-16.384..16.383 m/s^2)
     * Scale: 0.001
     * Offset: -16.384
     */
    uint16_t prim_a_lat_data_raw_safe_min;

    /**
     * Lateral acceleration estimation (Primary) Nominal Lateral Acceleration
     *
     * Range: 0..32767 (-16.384..16.383 m/s^2)
     * Scale: 0.001
     * Offset: -16.384
     */
    uint16_t prim_a_lat_data_raw_safe_nom;

    /**
     * Lateral acceleration estimation (Primary) Quality factor for Min and Max signals
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_a_lat_data_raw_safe_min_max_qf;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_axle_slip_sts_and_rel_ag_ub;

    /**
     * Primary:
     * ---------
     * It contains Front and Rear Axle Slip status, Intervention Status and Relative Roll & Pitch informations. Front axle slip status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_axle_slip_sts_and_rel_ag_frnt_axle;

    /**
     * Primary:
     * ---------
     * It contains Front and Rear Axle Slip status, Intervention Status and Relative Roll & Pitch informations. Rear axle slip status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_axle_slip_sts_and_rel_ag_re_axle;

    /**
     * Primary:
     * ---------
     * It contains Front and Rear Axle Slip status, Intervention Status and Relative Roll & Pitch informations. Qulality Factor of Relative Pitch
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_axle_slip_sts_and_rel_ag_rel_pitch_qf;

    /**
     * Primary:
     * ---------
     * It contains Front and Rear Axle Slip status, Intervention Status and Relative Roll & Pitch informations. Qulality Factor of Relative Roll
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_axle_slip_sts_and_rel_ag_rel_rol_qf;

    /**
     * Primary:
     * ---------
     * It contains Front and Rear Axle Slip status, Intervention Status and Relative Roll & Pitch informations. Relative Pitch
     *
     * Range: -32768..32766 (-1.6384..1.6383 rad)
     * Scale: 5e-05
     * Offset: 0
     */
    int16_t prim_axle_slip_sts_and_rel_ag_rel_pitch;

    /**
     * Primary:
     * ---------
     * It contains Front and Rear Axle Slip status, Intervention Status and Relative Roll & Pitch informations. Relative Roll
     *
     * Range: -32768..32766 (-1.6384..1.6383 rad)
     * Scale: 5e-05
     * Offset: 0
     */
    int16_t prim_axle_slip_sts_and_rel_ag_rel_roll;

    /**
     * Primary:
     * ---------
     * It contains Front and Rear Axle Slip status, Intervention Status and Relative Roll & Pitch informations. Intervention status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_axle_slip_sts_and_rel_ag_intv_sts;

    /**
     * Yaw Rate Estimation (Primary) Counter
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_yaw_rate_safe_cntr;

    /**
     * Yaw Rate Estimation (Primary) Quality factor for Min and Max signals
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_yaw_rate_safe_min_max_qf;

    /**
     * Yaw Rate Estimation (Primary) Quality factor for Nom signal
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_yaw_rate_safe_nom_qf;

    /**
     * Yaw Rate Estimation (Primary) Checksum
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_yaw_rate_safe_chks;

    /**
     * Yaw Rate Estimation (Primary) Maximum Yaw Rate
     *
     * Range: -16384..16383 (-3.2768..3.2766 rad/s)
     * Scale: 0.0002
     * Offset: 0
     */
    int16_t prim_yaw_rate_safe_max;

    /**
     * Yaw Rate Estimation (Primary) Minimum Yaw Rate
     *
     * Range: -16384..16383 (-3.2768..3.2766 rad/s)
     * Scale: 0.0002
     * Offset: 0
     */
    int16_t prim_yaw_rate_safe_min;

    /**
     * Yaw Rate Estimation (Primary) Nominal Yaw Rate
     *
     * Range: -16384..16383 (-3.2768..3.2766 rad/s)
     * Scale: 0.0002
     * Offset: 0
     */
    int16_t prim_yaw_rate_safe_nom;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_yaw_rate_safe_ub;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_rot_tooth_cntr_ub;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_rot_dir_re_safe1_ub;

    /**
     * Wheel rotation rear wheel. E2E Counter
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_rot_dir_re_safe1_cntr;

    /**
     * Wheel rotation rear wheel. Left wheel
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_rot_dir_re_safe1_le;

    /**
     * Wheel rotation rear wheel. Qualilty factor of left wheel rotation
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_rot_dir_re_safe1_le_qf;

    /**
     * Wheel rotation rear wheel. Right wheel
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_rot_dir_re_safe1_ri;

    /**
     * Wheel rotation rear wheel. Quality factor of right wheel rotation
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_rot_dir_re_safe1_ri_qf;

    /**
     * Wheel rotation rear wheel. E2E checksum
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_rot_dir_re_safe1_chks;

    /**
     * Added with SCR 515, Vehicle State 519G
     * 
     * WhlRotToothCntrRec signal with Qf. E2E Counter
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_rot_tooth_cntr_cntr;

    /**
     * Added with SCR 515, Vehicle State 519G
     * 
     * WhlRotToothCntrRec signal with Qf. E2E Checksum
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_rot_tooth_cntr_chks;

    /**
     * Added with SCR 515, Vehicle State 519G
     * 
     * WhlRotToothCntrRec signal with Qf. Wheel rotation impulse counter front left. For one complete wheel revolution the counter will increase by 96 (with 48 magnetic pole-pairs)
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_le;

    /**
     * Added with SCR 515, Vehicle State 519G
     * 
     * WhlRotToothCntrRec signal with Qf. Quality factor for front left wheel
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_le_qf;

    /**
     * Added with SCR 515, Vehicle State 519G
     * 
     * WhlRotToothCntrRec signal with Qf. Quality factor for front right wheel
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_ri_qf;

    /**
     * Added with SCR 515, Vehicle State 519G
     * 
     * WhlRotToothCntrRec signal with Qf. Quality factor for rear left wheel
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_le_qf;

    /**
     * Added with SCR 515, Vehicle State 519G
     * 
     * WhlRotToothCntrRec signal with Qf. Quality factor for rear right wheel
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_ri_qf;

    /**
     * Added with SCR 515, Vehicle State 519G
     * 
     * WhlRotToothCntrRec signal with Qf. Wheel rotation impulse counter front right. For one complete wheel revolution the counter will increase by 96 (with 48 magnetic pole-pairs)
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_ri;

    /**
     * Added with SCR 515, Vehicle State 519G
     * 
     * WhlRotToothCntrRec signal with Qf. Wheel rotation impulse counter rear left. For one complete wheel revolution the counter will increase by 96 (with 48 magnetic pole-pairs)
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_le;

    /**
     * Added with SCR 515, Vehicle State 519G
     * 
     * WhlRotToothCntrRec signal with Qf. Wheel rotation impulse counter Rear right. For one complete wheel revolution the counter will increase by 96 (with 48 magnetic pole-pairs)
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_ri;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_v_lat_safe_ub;

    /**
     * Lateral Velocity estimation (Primary) Counter
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_v_lat_safe_cntr;

    /**
     * Lateral Velocity estimation (Primary) Quality Factor for Nom signal
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_v_lat_safe_nom_qf;

    /**
     * Lateral Velocity estimation (Primary) Quality factor for Min and Max signals
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_v_lat_safe_min_max_qf;

    /**
     * Lateral Velocity estimation (Primary) Checksum
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_v_lat_safe_chks;

    /**
     * Lateral Velocity estimation (Primary) Maximum Lateral Velocity
     *
     * Range: -16384..16383 (-16.384..16.383 m/s)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t prim_v_lat_safe_max;

    /**
     * Lateral Velocity estimation (Primary) Minimum Lateral Velocity
     *
     * Range: -16384..16383 (-16.384..16.383 m/s)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t prim_v_lat_safe_min;

    /**
     * Lateral Velocity estimation (Primary) Nominal Lateral Velocity
     *
     * Range: -16384..16383 (-16.384..16.383 m/s)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t prim_v_lat_safe_nom;
};

/**
 * Signals in message SSMMid5CanFdFr04.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_t {
    /**
     * Wheel angle speed front wheels, primary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Qf for wheel speed sensor
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_ag_spd_frnt_safe_ri_qf;

    /**
     * Wheel angle speed front wheels, primary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Qf for wheel speed sensor
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_ag_spd_frnt_safe_le_qf;

    /**
     * Wheel angle speed front wheels, primary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Counter
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_ag_spd_frnt_safe_cntr;

    /**
     * Wheel angle speed front wheels, primary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Checksum
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_ag_spd_frnt_safe_chks;

    /**
     * Wheel angle speed front wheels, primary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Angular velocity of left wheel.
     *
     * Range: -32640..32640 (-255..255 rad/s)
     * Scale: 0.0078125
     * Offset: 0
     */
    int16_t prim_whl_ag_spd_frnt_safe_le;

    /**
     * Wheel angle speed front wheels, primary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Angular velocity of right wheel.
     *
     * Range: -32640..32640 (-255..255 rad/s)
     * Scale: 0.0078125
     * Offset: 0
     */
    int16_t prim_whl_ag_spd_frnt_safe_ri;

    /**
     * Wheel angle speed rear wheels, primary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Qf for wheel speed sensor
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_ag_spd_re_safe_ri_qf;

    /**
     * Wheel angle speed rear wheels, primary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Qf for wheel speed sensor
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_ag_spd_re_safe_le_qf;

    /**
     * Wheel angle speed rear wheels, primary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Counter
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_ag_spd_re_safe_cntr;

    /**
     * Wheel angle speed rear wheels, primary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Checksum
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_ag_spd_re_safe_chks;

    /**
     * Wheel angle speed rear wheels, primary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Angular velocity of left wheel.
     *
     * Range: -32640..32640 (-255..255 rad/s)
     * Scale: 0.0078125
     * Offset: 0
     */
    int16_t prim_whl_ag_spd_re_safe_le;

    /**
     * Wheel angle speed rear wheels, primary channel
     * 
     * Added with SCR 1972, Vehicle State 519G Angular velocity of right wheel.
     *
     * Range: -32640..32640 (-255..255 rad/s)
     * Scale: 0.0078125
     * Offset: 0
     */
    int16_t prim_whl_ag_spd_re_safe_ri;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_ag_spd_frnt_safe_ub;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_whl_ag_spd_re_safe_ub;

    /**
     * Vehicle Mass estimation Vehicle Mass Nominal Quality factor
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_veh_m_safe_nom_qf;

    /**
     * Vehicle Mass estimation E2E Conter
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_veh_m_safe_cntr;

    /**
     * Vehicle Mass estimation E2E Checksum
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_veh_m_safe_chks;

    /**
     * Vehicle Mass estimation Vehicle Mass Maximum Value
     *
     * Range: 0..255 (2400..3675 kg)
     * Scale: 5
     * Offset: 2400
     */
    uint8_t prim_veh_m_safe_veh_m_max;

    /**
     * Vehicle Mass estimation Vehicle Mass Minimum Value
     *
     * Range: 0..255 (2400..3675 kg)
     * Scale: 5
     * Offset: 2400
     */
    uint8_t prim_veh_m_safe_veh_m_min;

    /**
     * Vehicle Mass estimation Vehicle Mass Nominal Value
     *
     * Range: 0..255 (2400..3675 kg)
     * Scale: 5
     * Offset: 2400
     */
    uint8_t prim_veh_m_safe_veh_m_nom;

    /**
     * Vehicle Mass estimation Vehicle Mass Min Max Quality factor
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_veh_m_safe_safe_qf;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_veh_m_safe_ub;
};

/**
 * Signals in message SSMMid5CanFdFr05.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_max_a_lat_estimd_group_ub;

    /**
     *  Maximum lateral acceleration
     *
     * Range: -16352..16353 (-138.992..139.0005 m/s^2)
     * Scale: 0.0085
     * Offset: 0
     */
    int16_t prim_max_a_lat_estimd_group_acceleration;

    /**
     *  Maximum lateral acceleration rate
     *
     * Range: -16384..16383 (-4..3.999755859375 Unitless)
     * Scale: 0.000244140625
     * Offset: 0
     */
    int16_t prim_max_a_lat_estimd_group_jerk;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_whl_ag_rate_lim_estimd_safe_ub;

    /**
     *  Counter
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_whl_ag_rate_lim_estimd_safe_cntr;

    /**
     *  Checksum
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_whl_ag_rate_lim_estimd_safe_chks;

    /**
     *  Maximum wheel angle rate calculated from limited rack position rate
     *
     * Range: 0..28000 (-0.7..0.7 rad/s)
     * Scale: 5e-05
     * Offset: -0.7
     */
    uint16_t ad_prim_whl_ag_rate_lim_estimd_safe_ad_whl_ag_rate1;
};

/**
 * Signals in message SSMMid5CanFdFr06.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ssm_degraded_ub;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_safe_stop_actv_group_safe_ub;

    /**
     * Safe stop active Safe stop active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_safe_stop_actv_group_safe_platform_safe_stop_actv;

    /**
     * Safe stop active E2E counter
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_safe_stop_actv_group_safe_cntr;

    /**
     * Safe stop active E2E checksum
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_safe_stop_actv_group_safe_chks;

    /**
     * The signal shall introduce the SSM Status Message via CAN FD 5/6 to the VIM.  degradedsignal
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ssm_degradedssmdegraded;

    /**
     * The signal shall introduce the SSM Status Message via CAN FD 5/6 to the VIM.  Counter
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ssm_degradedcntr;

    /**
     * The signal shall introduce the SSM Status Message via CAN FD 5/6 to the VIM.  checksome
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ssm_degradedchks;
};

/**
 * Signals in message SSMMid5CanFdFr07.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr07_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t steer_mech_mon_sts_ub;

    /**
     * The DATA-ELEM aims to inform relevant system information about the mechnical status of the steering system.
     * This is done by detecting different levels of offset of the nominal performance.
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t steer_mech_mon_sts;
};

/**
 * Signals in message VimMid5CanFdCanNmFr.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_node_id_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_pni_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_aw_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_cs_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_rmr_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_entrance_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t infotainment_and_hmi_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t body_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t visibility_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t warning_sounds_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t hazard_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_locking_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_driverinfo_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_driverinfo_poll_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pncgsd_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_global_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_trailer_caravan_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_driving_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_pre_climatization_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_charging_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_start_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_spare1_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_spare2_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_spare3_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnc_spare4_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pnchv_energy_storage_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vehicle_api_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_vim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t diesel_vim;
};

/**
 * Signals in message VIMMid5CanFdFr02.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_t {
    /**
     * AD POSE information E2E profile 5 Check Sum
     *
     * Range: 0..65535 (0..65535 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad_prim_pose_chks;

    /**
     * AD POSE information E2E profile 5 counter
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pose_cntr;

    /**
     * AD POSE information Acceleration X
     *
     * Range: 0..1048575 (-52.429..52.4285 m/s^2)
     * Scale: 0.0001
     * Offset: -52.429
     */
    uint32_t ad_prim_pose_ax;

    /**
     * AD POSE information Acceleration Y
     *
     * Range: 0..1048575 (-52.429..52.4285 m/s^2)
     * Scale: 0.0001
     * Offset: -52.429
     */
    uint32_t ad_prim_pose_ay;

    /**
     * AD POSE information Acceleration Z
     *
     * Range: 0..1048575 (-52.429..52.4285 m/s^2)
     * Scale: 0.0001
     * Offset: -52.429
     */
    uint32_t ad_prim_pose_az;

    /**
     * AD POSE information E2E profile 5 Data ID
     *
     * Range: 0..65535 (0..65535 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad_prim_pose_data_id;

    /**
     * AD POSE information Pitch
     *
     * Range: 0..65520 (-1.638..1.638 rad)
     * Scale: 5e-05
     * Offset: -1.638
     */
    uint16_t ad_prim_pose_pitch;

    /**
     * AD POSE information Pitch rate
     *
     * Range: 0..1048575 (-5.243..5.24275 rad/s)
     * Scale: 1e-05
     * Offset: -5.243
     */
    uint32_t ad_prim_pose_pitch_rate;

    /**
     * AD POSE information Position X
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 5mm)
     * Scale: 1
     * Offset: 0
     */
    int32_t ad_prim_pose_pos_x;

    /**
     * AD POSE information Position Y
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 5mm)
     * Scale: 1
     * Offset: 0
     */
    int32_t ad_prim_pose_pos_y;

    /**
     * AD POSE information Roll
     *
     * Range: 0..65520 (-1.638..1.638 rad)
     * Scale: 5e-05
     * Offset: -1.638
     */
    uint16_t ad_prim_pose_roll;

    /**
     * AD POSE information Roll rate
     *
     * Range: 0..1048575 (-5.243..5.24275 rad/s)
     * Scale: 1e-05
     * Offset: -5.243
     */
    uint32_t ad_prim_pose_roll_rate;

    /**
     * AD POSE information Time Stamp Nano Second
     *
     * Range: 0..4294967295 (0..4294967295 ns)
     * Scale: 1
     * Offset: 0
     */
    uint32_t ad_prim_pose_ti_stamp_nano_sec;

    /**
     * AD POSE information Time stampSecond
     *
     * Range: 0..4294967295 (0..4294967295 s)
     * Scale: 1
     * Offset: 0
     */
    uint32_t ad_prim_pose_ti_stamp_sec;

    /**
     * AD POSE information Velocity X
     *
     * Range: 0..65535 (-12.768..52.767 m/s)
     * Scale: 0.001
     * Offset: -12.768
     */
    uint16_t ad_prim_pose_vx;

    /**
     * AD POSE information Velocity Y
     *
     * Range: 0..16383 (-8.192..8.191 m/s)
     * Scale: 0.001
     * Offset: -8.192
     */
    uint16_t ad_prim_pose_vy;

    /**
     * AD POSE information Yaw
     *
     * Range: 0..16776000 (-4.194..4.194 rad)
     * Scale: 5e-07
     * Offset: -4.194
     */
    uint32_t ad_prim_pose_yaw;

    /**
     * AD POSE information Yaw rate
     *
     * Range: 0..4194000 (-2.097..2.097 rad/s)
     * Scale: 1e-06
     * Offset: -2.097
     */
    uint32_t ad_prim_pose_yaw_rate;

    /**
     * AD POSE information Confidence for acceleration X
     *
     * Range: 0..7 (0..7 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pose_ax_conf;

    /**
     * AD POSE information Confidence for acceleration Y
     *
     * Range: 0..7 (0..7 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pose_ay_conf;

    /**
     * AD POSE information Confidence for acceleration Z
     *
     * Range: 0..7 (0..7 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pose_az_conf;

    /**
     * AD POSE information Confidence for pitch
     *
     * Range: 0..7 (0..7 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pose_pitch_conf;

    /**
     * AD POSE information Confidence for Pitch rate
     *
     * Range: 0..7 (0..7 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pose_pitch_rate_conf;

    /**
     * AD POSE information Confidence for position X
     *
     * Range: 0..7 (0..7 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pose_pos_x_conf;

    /**
     * AD POSE information Confidence for position Y
     *
     * Range: 0..7 (0..7 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pose_pos_y_conf;

    /**
     * AD POSE information Confidence for Roll
     *
     * Range: 0..7 (0..7 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pose_roll_conf;

    /**
     * AD POSE information Confidence for roll rate
     *
     * Range: 0..7 (0..7 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pose_roll_rate_conf;

    /**
     * AD POSE information Confidence for velocity X
     *
     * Range: 0..7 (0..7 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pose_vx_conf;

    /**
     * AD POSE information Confidence for velocity Y
     *
     * Range: 0..7 (0..7 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pose_vy_conf;

    /**
     * AD POSE information Confidence for yaw
     *
     * Range: 0..7 (0..7 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pose_yaw_conf;

    /**
     * AD POSE information Confidence for yaw rate
     *
     * Range: 0..7 (0..7 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pose_yaw_rate_conf;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pose_ub;
};

/**
 * Signals in message VIMMid5CanFdFr03.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_t {
    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 E2E checksum, profile 5
     *
     * Range: 0..65535 (0..65535 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad_prim_pss_group_safe0_chks;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 E2E Counter, profile 5
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe0_cntr;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 E2E Data ID, profile 5
     *
     * Range: 0..65535 (0..65535 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad_prim_pss_group_safe0_data_id;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Trajectory ID
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe0_traject_id;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Delta time position 1
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe0_delta_t_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Delta time position 2
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe0_delta_t_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Delta X position 1
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe0_delta_x_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Delta X position 2
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe0_delta_x_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Delta Y position 1
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe0_delta_y_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Delta Y position 2
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe0_delta_y_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Heading position 1
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe0_heading_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Heading position 2
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe0_heading_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Init heading
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe0_init_heading;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Init position X
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 m)
     * Scale: 1
     * Offset: 0
     */
    int32_t ad_prim_pss_group_safe0_init_pos_x;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Init position Y
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 m)
     * Scale: 1
     * Offset: 0
     */
    int32_t ad_prim_pss_group_safe0_init_pos_y;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Time stamp, nano seconds
     *
     * Range: 0..4294967295 (0..4294967295 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe0_ti_stamp_nano_sec;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 0 includes:
     * * Initial point
     * * PSS point 1 and 2 Time stamp, seconds
     *
     * Range: 0..4294967295 (0..4294967295 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe0_ti_stamp_sec;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe0_ub;
};

/**
 * Signals in message VIMMid5CanFdFr04.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_t {
    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  E2E checksum, profile 5
     *
     * Range: 0..65535 (0..65535 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad_prim_pss_group_safe1_chks;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  E2E counter, profile 5
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe1_cntr;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  E2E Data ID, profile 5
     *
     * Range: 0..65535 (0..65535 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad_prim_pss_group_safe1_data_id;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta time position 1
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe1_delta_t_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta time position 2
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe1_delta_t_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta time position 3
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe1_delta_t_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta time position 4
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe1_delta_t_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta time position 5
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe1_delta_t_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta time position 6
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe1_delta_t_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta X position 1
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe1_delta_x_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta X position 2
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe1_delta_x_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta X position 3
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe1_delta_x_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta X position 4
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe1_delta_x_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta X position 5
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe1_delta_x_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta X position 6
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe1_delta_x_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta Y position 1
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe1_delta_y_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta Y position 2
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe1_delta_y_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta Y position 3
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe1_delta_y_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta Y position 4
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe1_delta_y_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta Y position 5
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe1_delta_y_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Delta Y position 6
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe1_delta_y_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Heading position 1
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe1_heading_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Heading position 2
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe1_heading_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Heading position 3
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe1_heading_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Heading position 4
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe1_heading_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Heading position 5
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe1_heading_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Heading position 6
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe1_heading_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 1 includes:
     * * 6 PSS points, with overall sequence 3-8
     *  Trajectory ID
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe1_traject_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe1_ub;
};

/**
 * Signals in message VIMMid5CanFdFr05.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_t {
    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  E2E checksum, profile 5
     *
     * Range: 0..65535 (0..65535 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad_prim_pss_group_safe2_chks;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  E2E counter, profile 5
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe2_cntr;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  E2E Data ID, profile 5
     *
     * Range: 0..65535 (0..65535 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad_prim_pss_group_safe2_data_id;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta time position 1
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe2_delta_t_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta time position 2
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe2_delta_t_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta time position 3
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe2_delta_t_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta time position 4
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe2_delta_t_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta time position 5
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe2_delta_t_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta time position 6
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe2_delta_t_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta X position 1
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe2_delta_x_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta X position 2
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe2_delta_x_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta X position 3
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe2_delta_x_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta X position 4
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe2_delta_x_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta X position 5
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe2_delta_x_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta X position 6
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe2_delta_x_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta Y position 1
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe2_delta_y_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta Y position 2
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe2_delta_y_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta Y position 3
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe2_delta_y_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta Y position 4
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe2_delta_y_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta Y position 5
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe2_delta_y_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Delta Y position 6
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe2_delta_y_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Heading position 1
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe2_heading_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Heading position 2
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe2_heading_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Heading position 3
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe2_heading_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Heading position 4
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe2_heading_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Heading position 5
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe2_heading_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Heading position 6
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe2_heading_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 2 includes:
     * * 6 PSS points, with overall sequence 9-14
     *  Trajectory ID
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe2_traject_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe2_ub;
};

/**
 * Signals in message VIMMid5CanFdFr06.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_t {
    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  E2E checksum, profile 5
     *
     * Range: 0..65535 (0..65535 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad_prim_pss_group_safe3_chks;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  E2E counter, profile 5
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe3_cntr;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  E2E Data ID, profile 5
     *
     * Range: 0..65535 (0..65535 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad_prim_pss_group_safe3_data_id;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta time position 1
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe3_delta_t_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta time position 2
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe3_delta_t_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta time position 3
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe3_delta_t_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta time position 4
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe3_delta_t_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta time position 5
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe3_delta_t_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta time position 6
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe3_delta_t_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta X position 1
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe3_delta_x_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta X position 2
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe3_delta_x_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta X position 3
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe3_delta_x_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta X position 4
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe3_delta_x_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta X position 5
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe3_delta_x_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta X position 6
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe3_delta_x_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta Y position 1
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe3_delta_y_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta Y position 2
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe3_delta_y_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta Y position 3
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe3_delta_y_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta Y position 4
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe3_delta_y_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta Y position 5
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe3_delta_y_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Delta Y position 6
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe3_delta_y_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Heading position 1
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe3_heading_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Heading position 2
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe3_heading_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Heading position 3
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe3_heading_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Heading position 4
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe3_heading_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Heading position 5
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe3_heading_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Heading position 6
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe3_heading_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 3 includes:
     * * 6 PSS points, with overall sequence 15-20
     *  Trajectory ID
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe3_traject_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe3_ub;
};

/**
 * Signals in message VIMMid5CanFdFr07.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_t {
    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  E2E checksum, profile 5
     *
     * Range: 0..65535 (0..65535 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad_prim_pss_group_safe4_chks;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  E2E counter, profile 5
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe4_cntr;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  E2E Data ID, profile 5
     *
     * Range: 0..65535 (0..65535 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad_prim_pss_group_safe4_data_id;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta time position 1
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe4_delta_t_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta time position 2
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe4_delta_t_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta time position 3
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe4_delta_t_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta time position 4
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe4_delta_t_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta time position 5
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe4_delta_t_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta time position 6
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe4_delta_t_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta X position 1
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe4_delta_x_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta X position 2
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe4_delta_x_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta X position 3
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe4_delta_x_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta X position 4
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe4_delta_x_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta X position 5
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe4_delta_x_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta X position 6
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe4_delta_x_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta Y position 1
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe4_delta_y_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta Y position 2
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe4_delta_y_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta Y position 3
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe4_delta_y_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta Y position 4
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe4_delta_y_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta Y position 5
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe4_delta_y_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Delta Y position 6
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe4_delta_y_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Heading position 1
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe4_heading_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Heading position 2
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe4_heading_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Heading position 3
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe4_heading_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Heading position 4
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe4_heading_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Heading position 5
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe4_heading_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Heading position 6
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe4_heading_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 4 includes:
     * * 6 PSS points, with overall sequence 21-26
     *  Trajectory ID
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe4_traject_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe4_ub;
};

/**
 * Signals in message VIMMid5CanFdFr08.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_t {
    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  E2E checksum, profile 5
     *
     * Range: 0..65535 (0..65535 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad_prim_pss_group_safe5_chks;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  E2E counter, profile 5
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe5_cntr;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  E2E Data ID, profile 5
     *
     * Range: 0..65535 (0..65535 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad_prim_pss_group_safe5_data_id;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta time position 1
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe5_delta_t_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta time position 2
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe5_delta_t_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta time position 3
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe5_delta_t_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta time position 4
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe5_delta_t_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta time position 5
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe5_delta_t_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta time position 6
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe5_delta_t_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta X position 1
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe5_delta_x_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta X position 2
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe5_delta_x_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta X position 3
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe5_delta_x_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta X position 4
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe5_delta_x_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta X position 5
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe5_delta_x_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta X position 6
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe5_delta_x_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta Y position 1
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe5_delta_y_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta Y position 2
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe5_delta_y_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta Y position 3
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe5_delta_y_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta Y position 4
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe5_delta_y_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta Y position 5
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe5_delta_y_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Delta Y position 6
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe5_delta_y_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Heading position 1
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe5_heading_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Heading position 2
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe5_heading_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Heading position 3
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe5_heading_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Heading position 4
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe5_heading_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Heading position 5
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe5_heading_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Heading position 6
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe5_heading_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 5 includes:
     * * 6 PSS points, with overall sequence 27-32
     *  Trajectory ID
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe5_traject_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe5_ub;
};

/**
 * Signals in message VIMMid5CanFdFr09.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_t {
    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  E2E checksum, profile 5
     *
     * Range: 0..65535 (0..65535 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad_prim_pss_group_safe6_chks;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  E2E counter, profile 5
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe6_cntr;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  E2E Data ID, profile 5
     *
     * Range: 0..65535 (0..65535 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad_prim_pss_group_safe6_data_id;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta time position 1
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe6_delta_t_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta time position 2
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe6_delta_t_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta time position 3
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe6_delta_t_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta time position 4
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe6_delta_t_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta time position 5
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe6_delta_t_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta time position 6
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe6_delta_t_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta X position 1
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe6_delta_x_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta X position 2
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe6_delta_x_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta X position 3
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe6_delta_x_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta X position 4
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe6_delta_x_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta X position 5
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe6_delta_x_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta X position 6
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe6_delta_x_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta Y position 1
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe6_delta_y_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta Y position 2
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe6_delta_y_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta Y position 3
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe6_delta_y_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta Y position 4
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe6_delta_y_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta Y position 5
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe6_delta_y_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Delta Y position 6
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe6_delta_y_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Heading position 1
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe6_heading_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Heading position 2
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe6_heading_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Heading position 3
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe6_heading_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Heading position 4
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe6_heading_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Heading position 5
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe6_heading_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Heading position 6
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe6_heading_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 6 includes:
     * * 6 PSS points, with overall sequence 33-38
     * 
     *  Trajectory ID
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe6_traject_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe6_ub;
};

/**
 * Signals in message VIMMid5CanFdFr10.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_t {
    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  E2E checksum, profile 5
     *
     * Range: 0..65535 (0..65535 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad_prim_pss_group_safe7_chks;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  E2E counter, profile 5
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe7_cntr;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  E2E Data ID, profile 5
     *
     * Range: 0..65535 (0..65535 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad_prim_pss_group_safe7_data_id;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Delta time position 1
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe7_delta_t_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Delta time position 2
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe7_delta_t_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Delta time position 3
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe7_delta_t_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Delta time position 4
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe7_delta_t_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Delta time position 5
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe7_delta_t_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Delta time position 6
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe7_delta_t_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Delta X position 1
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe7_delta_x_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Delta X position 2
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe7_delta_x_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Delta X position 3
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe7_delta_x_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Delta X position 4
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe7_delta_x_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Delta X position 5
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe7_delta_x_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Delta X position 6
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe7_delta_x_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Delta Y position 1
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe7_delta_y_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Delta Y position 2
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe7_delta_y_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Delta Y position 3
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe7_delta_y_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Delta Y position 4
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe7_delta_y_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Delta Y position 5
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe7_delta_y_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Delta Y position 6
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe7_delta_y_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Heading position 1
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe7_heading_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Heading position 2
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe7_heading_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Heading position 3
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe7_heading_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Heading position 4
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe7_heading_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Heading position 5
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe7_heading_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Heading position 6
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe7_heading_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 7 includes:
     * * 6 PSS points, with overall sequence 39-44
     * 
     *  Trajectory ID
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe7_traject_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe7_ub;
};

/**
 * Signals in message VIMMid5CanFdFr11.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_t {
    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 E2E checksum, profile 5
     *
     * Range: 0..65535 (0..65535 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad_prim_pss_group_safe8_chks;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 E2E counter, profile 5
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe8_cntr;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 E2E Data ID, profile 5
     *
     * Range: 0..65535 (0..65535 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad_prim_pss_group_safe8_data_id;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta time position 1
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe8_delta_t_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta time position 2
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe8_delta_t_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta time position 3
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe8_delta_t_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta time position 4
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe8_delta_t_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta time position 5
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe8_delta_t_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta time position 6
     *
     * Range: 0..262000 (0..0.262 s)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t ad_prim_pss_group_safe8_delta_t_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta X position 1
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe8_delta_x_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta X position 2
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe8_delta_x_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta X position 3
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe8_delta_x_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta X position 4
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe8_delta_x_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta X position 5
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe8_delta_x_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta X position 6
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe8_delta_x_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta Y position 1
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe8_delta_y_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta Y position 2
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe8_delta_y_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta Y position 3
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe8_delta_y_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta Y position 4
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe8_delta_y_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta Y position 5
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe8_delta_y_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Delta Y position 6
     *
     * Range: 0..262140 (-13.107..13.107 m)
     * Scale: 0.0001
     * Offset: -13.107
     */
    uint32_t ad_prim_pss_group_safe8_delta_y_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Heading position 1
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe8_heading_pos1;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Heading position 2
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe8_heading_pos2;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Heading position 3
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe8_heading_pos3;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Heading position 4
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe8_heading_pos4;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Heading position 5
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe8_heading_pos5;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Heading position 6
     *
     * Range: 0..65535 (-3.2767..3.2768 rad)
     * Scale: 0.0001
     * Offset: -3.2767
     */
    uint16_t ad_prim_pss_group_safe8_heading_pos6;

    /**
     * Platform Safe Stop buffer paths.
     * 
     * All signalgroups cover 50 points + 1 initial point. Each point has delta X, Y, time and heading. All signal groups are tied together with a trajectory id.
     * All signalgroups include signals for E2E protection using profile 5 according to Autosar 4.2.2.
     * 
     * Signal group 8 includes:
     * * 6 PSS points, with overall sequence 45-50 Trajectory ID
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe8_traject_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_pss_group_safe8_ub;
};

/**
 * Signals in message VIMMid5CanFdFr12.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr12_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_whl_ag_req_group_safe_ub;

    /**
     * AD Requested wheel angle, primary channel E2E Counter
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_whl_ag_req_group_safe_cntr;

    /**
     * AD Requested wheel angle, primary channel E2E Checksum
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_whl_ag_req_group_safe_chks;

    /**
     * AD Requested wheel angle, primary channel The requested wheel angle. The wheel angle is supervised by the LatCtrl ASIL D supervisory controller before being converted to an ASIL D rack position request.
     *
     * Range: 0..32388 (-0.85..0.85004612 rad)
     * Scale: 5.249e-05
     * Offset: -0.85
     */
    uint16_t ad_prim_whl_ag_req_group_safe_whl_ag_req;
};

/**
 * Signals in message VIMMid5CanFdFr13.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sds_flt_mgr_sts_safe_ub;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_safe_stop_req_safe_ub;

    /**
     * Safe stop request Safe stop request
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_safe_stop_req_safe_safe_stop_req;

    /**
     * Safe stop request E2E counter
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_safe_stop_req_safe_cntr;

    /**
     * Safe stop request E2E checksum
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_prim_safe_stop_req_safe_chks;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sds_flt_mgr_sts_safe_sds_flt_mgr_sts;

    /**
     *  Counter
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sds_flt_mgr_sts_safe_cntr;

    /**
     *  CRC
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sds_flt_mgr_sts_safe_chks;
};

/**
 * Signals in message VimMid5CanFdTimeSynchFr.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_time_synch_fr_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message VIMPrototypeMid5CanFdFr13.
 *
 * All signal values are as on the CAN bus.
 */
struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_prototype_mid5_can_fd_fr13_t {
    /**
     * Used for validating Autosar time synchronization mechanism in SSM. Time stamp, nano seconds
     *
     * Range: 0..4294967295 (0..4294967295 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint32_t prim_mon_ti_sync_msg_ti_stamp_nano_sec;

    /**
     * Used for validating Autosar time synchronization mechanism in SSM. Time stamp, seconds
     *
     * Range: 0..4294967295 (0..4294967295 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint32_t prim_mon_ti_sync_msg_ti_stamp_sec;

    /**
     * Used for validating Autosar time synchronization mechanism in SSM. Profile VCC checksum
     *
     * Range: 0..255 (0..255 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_mon_ti_sync_msg_chks;

    /**
     * Used for validating Autosar time synchronization mechanism in SSM. Profile VCC counter
     *
     * Range: 0..15 (0..15 Unitless)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_mon_ti_sync_msg_cntr;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prim_mon_ti_sync_msg_ub;
};

/**
 * Pack message SsmMid5CanFdCanNmFr.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_t *src_p,
    size_t size);

/**
 * Unpack message SsmMid5CanFdCanNmFr.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_nm_node_id_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_nm_node_id_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_nm_node_id_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_nm_pni_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_nm_pni_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_nm_pni_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_nm_aw_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_nm_aw_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_nm_aw_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_nm_cs_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_nm_cs_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_nm_cs_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_nm_rmr_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_nm_rmr_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_nm_rmr_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_entrance_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_entrance_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_entrance_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_infotainment_and_hmi_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_infotainment_and_hmi_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_infotainment_and_hmi_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_body_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_body_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_body_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_visibility_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_visibility_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_visibility_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_warning_sounds_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_warning_sounds_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_warning_sounds_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_hazard_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_hazard_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_hazard_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_locking_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_locking_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_locking_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_driverinfo_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_driverinfo_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_driverinfo_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_driverinfo_poll_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_driverinfo_poll_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_driverinfo_poll_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pncgsd_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pncgsd_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pncgsd_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_global_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_global_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_global_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_trailer_caravan_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_trailer_caravan_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_trailer_caravan_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_driving_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_driving_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_driving_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_pre_climatization_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_pre_climatization_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_pre_climatization_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_charging_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_charging_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_charging_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_start_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_start_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_start_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_spare1_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_spare1_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_spare1_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_spare2_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_spare2_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_spare2_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_spare3_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_spare3_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_spare3_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_spare4_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_spare4_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnc_spare4_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnchv_energy_storage_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnchv_energy_storage_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_pnchv_energy_storage_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_vehicle_api_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_vehicle_api_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_vehicle_api_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_brake_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_brake_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_brake_ssm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_diesel_ssm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_diesel_ssm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_can_nm_fr_diesel_ssm_is_in_range(uint8_t value);

/**
 * Pack message SSMMid5CanFdFr01.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_t *src_p,
    size_t size);

/**
 * Unpack message SSMMid5CanFdFr01.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_pinion_steer_ag_spd1_group_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_pinion_steer_ag_spd1_group_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_pinion_steer_ag_spd1_group_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_pinion_steer_ag1_group_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_pinion_steer_ag1_group_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_pinion_steer_ag1_group_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_pinion_steer_ag1_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_pinion_steer_ag1_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_pinion_steer_ag1_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_pinion_steer_ag1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_pinion_steer_ag1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_pinion_steer_ag1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_pinion_steer_ag_spd1_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_pinion_steer_ag_spd1_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_pinion_steer_ag_spd1_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_pinion_steer_ag_spd1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_pinion_steer_ag_spd1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr01_pinion_steer_ag_spd1_is_in_range(int16_t value);

/**
 * Pack message SSMMid5CanFdFr02.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_t *src_p,
    size_t size);

/**
 * Unpack message SSMMid5CanFdFr02.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_prim_pose_mon_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_prim_pose_mon_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_prim_pose_mon_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_ad_prim_mot_tq_asil_thrshld_excd_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_ad_prim_mot_tq_asil_thrshld_excd_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_ad_prim_mot_tq_asil_thrshld_excd_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_ad_prim_mot_tq_asil_thrshld_excd_thrshld_exceeded_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_ad_prim_mot_tq_asil_thrshld_excd_thrshld_exceeded_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_ad_prim_mot_tq_asil_thrshld_excd_thrshld_exceeded_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_ad_prim_mot_tq_asil_thrshld_excd_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_ad_prim_mot_tq_asil_thrshld_excd_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_ad_prim_mot_tq_asil_thrshld_excd_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_ad_prim_mot_tq_asil_thrshld_excd_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_ad_prim_mot_tq_asil_thrshld_excd_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_ad_prim_mot_tq_asil_thrshld_excd_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_prim_pose_mon_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_prim_pose_mon_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_prim_pose_mon_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_prim_pose_mon_safe_yaw_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_prim_pose_mon_safe_yaw_err_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_prim_pose_mon_safe_yaw_err_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_prim_pose_mon_safe_safe_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_prim_pose_mon_safe_safe_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_prim_pose_mon_safe_safe_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_prim_pose_mon_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_prim_pose_mon_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_prim_pose_mon_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_prim_pose_mon_safe_lat_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_prim_pose_mon_safe_lat_err_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_prim_pose_mon_safe_lat_err_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_prim_pose_mon_safe_lgt_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_prim_pose_mon_safe_lgt_err_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr02_prim_pose_mon_safe_lgt_err_is_in_range(int16_t value);

/**
 * Pack message SSMMid5CanFdFr03.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_t *src_p,
    size_t size);

/**
 * Unpack message SSMMid5CanFdFr03.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_ad_prim_whl_ag_estimd_group_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_ad_prim_whl_ag_estimd_group_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_ad_prim_whl_ag_estimd_group_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_ad_prim_whl_ag_estimd_group_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_ad_prim_whl_ag_estimd_group_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_ad_prim_whl_ag_estimd_group_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_ad_prim_whl_ag_estimd_group_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_ad_prim_whl_ag_estimd_group_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_ad_prim_whl_ag_estimd_group_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_ad_prim_whl_ag_estimd_group_safe_whl_ag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_ad_prim_whl_ag_estimd_group_safe_whl_ag_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_ad_prim_whl_ag_estimd_group_safe_whl_ag_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_ad_prim_whl_ag_estimd_group_safe_whl_ag_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_ad_prim_whl_ag_estimd_group_safe_whl_ag_rate_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_ad_prim_whl_ag_estimd_group_safe_whl_ag_rate_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_ad_prim_whl_ag_estimd_group_safe_qf1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_ad_prim_whl_ag_estimd_group_safe_qf1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_ad_prim_whl_ag_estimd_group_safe_qf1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_nom_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_nom_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_nom_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_min_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_min_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_nom_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_nom_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_nom_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_min_max_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_min_max_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_a_lat_data_raw_safe_min_max_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_frnt_axle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_frnt_axle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_frnt_axle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_re_axle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_re_axle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_re_axle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_rel_pitch_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_rel_pitch_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_rel_pitch_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_rel_rol_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_rel_rol_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_rel_rol_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_rel_pitch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_rel_pitch_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_rel_pitch_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_rel_roll_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_rel_roll_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_rel_roll_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_intv_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_intv_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_axle_slip_sts_and_rel_ag_intv_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_min_max_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_min_max_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_min_max_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_nom_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_nom_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_nom_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_max_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_max_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_min_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_min_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_nom_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_nom_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_nom_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_yaw_rate_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_dir_re_safe1_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_dir_re_safe1_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_dir_re_safe1_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_dir_re_safe1_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_dir_re_safe1_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_dir_re_safe1_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_dir_re_safe1_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_dir_re_safe1_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_dir_re_safe1_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_dir_re_safe1_le_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_dir_re_safe1_le_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_dir_re_safe1_le_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_dir_re_safe1_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_dir_re_safe1_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_dir_re_safe1_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_dir_re_safe1_ri_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_dir_re_safe1_ri_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_dir_re_safe1_ri_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_dir_re_safe1_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_dir_re_safe1_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_dir_re_safe1_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_le_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_le_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_le_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_ri_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_ri_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_ri_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_le_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_le_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_le_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_ri_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_ri_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_ri_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_frnt_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_whl_rot_tooth_cntr_whl_rot_tooth_cntr_re_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_nom_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_nom_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_nom_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_min_max_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_min_max_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_min_max_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_max_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_max_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_min_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_min_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_nom_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_nom_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr03_prim_v_lat_safe_nom_is_in_range(int16_t value);

/**
 * Pack message SSMMid5CanFdFr04.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_t *src_p,
    size_t size);

/**
 * Unpack message SSMMid5CanFdFr04.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_frnt_safe_ri_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_frnt_safe_ri_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_frnt_safe_ri_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_frnt_safe_le_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_frnt_safe_le_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_frnt_safe_le_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_frnt_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_frnt_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_frnt_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_frnt_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_frnt_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_frnt_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_frnt_safe_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_frnt_safe_le_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_frnt_safe_le_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_frnt_safe_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_frnt_safe_ri_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_frnt_safe_ri_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_re_safe_ri_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_re_safe_ri_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_re_safe_ri_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_re_safe_le_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_re_safe_le_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_re_safe_le_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_re_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_re_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_re_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_re_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_re_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_re_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_re_safe_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_re_safe_le_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_re_safe_le_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_re_safe_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_re_safe_ri_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_re_safe_ri_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_frnt_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_frnt_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_frnt_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_re_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_re_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_whl_ag_spd_re_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_nom_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_nom_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_nom_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_veh_m_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_veh_m_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_veh_m_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_veh_m_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_veh_m_min_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_veh_m_min_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_veh_m_nom_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_veh_m_nom_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_veh_m_nom_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_safe_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_safe_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_safe_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr04_prim_veh_m_safe_ub_is_in_range(uint8_t value);

/**
 * Pack message SSMMid5CanFdFr05.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_t *src_p,
    size_t size);

/**
 * Unpack message SSMMid5CanFdFr05.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_prim_max_a_lat_estimd_group_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_prim_max_a_lat_estimd_group_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_prim_max_a_lat_estimd_group_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_prim_max_a_lat_estimd_group_acceleration_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_prim_max_a_lat_estimd_group_acceleration_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_prim_max_a_lat_estimd_group_acceleration_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_prim_max_a_lat_estimd_group_jerk_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_prim_max_a_lat_estimd_group_jerk_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_prim_max_a_lat_estimd_group_jerk_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_ad_prim_whl_ag_rate_lim_estimd_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_ad_prim_whl_ag_rate_lim_estimd_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_ad_prim_whl_ag_rate_lim_estimd_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_ad_prim_whl_ag_rate_lim_estimd_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_ad_prim_whl_ag_rate_lim_estimd_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_ad_prim_whl_ag_rate_lim_estimd_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_ad_prim_whl_ag_rate_lim_estimd_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_ad_prim_whl_ag_rate_lim_estimd_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_ad_prim_whl_ag_rate_lim_estimd_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_ad_prim_whl_ag_rate_lim_estimd_safe_ad_whl_ag_rate1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_ad_prim_whl_ag_rate_lim_estimd_safe_ad_whl_ag_rate1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr05_ad_prim_whl_ag_rate_lim_estimd_safe_ad_whl_ag_rate1_is_in_range(uint16_t value);

/**
 * Pack message SSMMid5CanFdFr06.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_t *src_p,
    size_t size);

/**
 * Unpack message SSMMid5CanFdFr06.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ssm_degraded_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ssm_degraded_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ssm_degraded_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ad_prim_safe_stop_actv_group_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ad_prim_safe_stop_actv_group_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ad_prim_safe_stop_actv_group_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ad_prim_safe_stop_actv_group_safe_platform_safe_stop_actv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ad_prim_safe_stop_actv_group_safe_platform_safe_stop_actv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ad_prim_safe_stop_actv_group_safe_platform_safe_stop_actv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ad_prim_safe_stop_actv_group_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ad_prim_safe_stop_actv_group_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ad_prim_safe_stop_actv_group_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ad_prim_safe_stop_actv_group_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ad_prim_safe_stop_actv_group_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ad_prim_safe_stop_actv_group_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ssm_degradedssmdegraded_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ssm_degradedssmdegraded_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ssm_degradedssmdegraded_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ssm_degradedcntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ssm_degradedcntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ssm_degradedcntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ssm_degradedchks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ssm_degradedchks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr06_ssm_degradedchks_is_in_range(uint8_t value);

/**
 * Pack message SSMMid5CanFdFr07.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr07_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr07_t *src_p,
    size_t size);

/**
 * Unpack message SSMMid5CanFdFr07.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr07_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr07_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr07_steer_mech_mon_sts_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr07_steer_mech_mon_sts_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr07_steer_mech_mon_sts_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr07_steer_mech_mon_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr07_steer_mech_mon_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_ssm_mid5_can_fd_fr07_steer_mech_mon_sts_is_in_range(uint8_t value);

/**
 * Pack message VimMid5CanFdCanNmFr.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_t *src_p,
    size_t size);

/**
 * Unpack message VimMid5CanFdCanNmFr.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_nm_node_id_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_nm_node_id_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_nm_node_id_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_nm_pni_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_nm_pni_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_nm_pni_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_nm_aw_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_nm_aw_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_nm_aw_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_nm_cs_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_nm_cs_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_nm_cs_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_nm_rmr_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_nm_rmr_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_nm_rmr_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_entrance_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_entrance_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_entrance_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_infotainment_and_hmi_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_infotainment_and_hmi_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_infotainment_and_hmi_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_body_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_body_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_body_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_visibility_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_visibility_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_visibility_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_warning_sounds_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_warning_sounds_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_warning_sounds_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_hazard_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_hazard_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_hazard_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_locking_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_locking_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_locking_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_driverinfo_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_driverinfo_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_driverinfo_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_driverinfo_poll_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_driverinfo_poll_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_driverinfo_poll_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pncgsd_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pncgsd_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pncgsd_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_global_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_global_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_global_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_trailer_caravan_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_trailer_caravan_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_trailer_caravan_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_driving_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_driving_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_driving_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_pre_climatization_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_pre_climatization_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_pre_climatization_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_charging_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_charging_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_charging_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_start_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_start_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_start_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_spare1_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_spare1_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_spare1_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_spare2_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_spare2_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_spare2_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_spare3_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_spare3_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_spare3_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_spare4_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_spare4_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnc_spare4_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnchv_energy_storage_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnchv_energy_storage_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_pnchv_energy_storage_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_vehicle_api_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_vehicle_api_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_vehicle_api_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_brake_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_brake_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_brake_vim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_diesel_vim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_diesel_vim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_can_nm_fr_diesel_vim_is_in_range(uint8_t value);

/**
 * Pack message VIMMid5CanFdFr02.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_t *src_p,
    size_t size);

/**
 * Unpack message VIMMid5CanFdFr02.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_chks_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_chks_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_ax_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_ax_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_ay_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_ay_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_ay_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_az_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_az_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_az_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_data_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_data_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_data_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pitch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pitch_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pitch_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pitch_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pitch_rate_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pitch_rate_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pos_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pos_x_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pos_x_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pos_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pos_y_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pos_y_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_roll_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_roll_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_roll_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_roll_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_roll_rate_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_roll_rate_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_ti_stamp_nano_sec_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_ti_stamp_nano_sec_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_ti_stamp_nano_sec_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_ti_stamp_sec_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_ti_stamp_sec_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_ti_stamp_sec_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_yaw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_yaw_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_yaw_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_yaw_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_yaw_rate_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_yaw_rate_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_ax_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_ax_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_ax_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_ay_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_ay_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_ay_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_az_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_az_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_az_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pitch_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pitch_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pitch_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pitch_rate_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pitch_rate_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pitch_rate_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pos_x_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pos_x_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pos_x_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pos_y_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pos_y_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_pos_y_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_roll_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_roll_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_roll_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_roll_rate_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_roll_rate_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_roll_rate_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_vx_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_vx_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_vx_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_vy_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_vy_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_vy_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_yaw_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_yaw_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_yaw_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_yaw_rate_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_yaw_rate_conf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_yaw_rate_conf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr02_ad_prim_pose_ub_is_in_range(uint8_t value);

/**
 * Pack message VIMMid5CanFdFr03.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_t *src_p,
    size_t size);

/**
 * Unpack message VIMMid5CanFdFr03.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_chks_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_chks_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_data_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_data_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_data_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_traject_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_traject_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_traject_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_delta_t_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_delta_t_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_delta_t_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_delta_t_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_delta_t_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_delta_t_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_delta_x_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_delta_x_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_delta_x_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_delta_x_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_delta_x_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_delta_x_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_delta_y_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_delta_y_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_delta_y_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_delta_y_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_delta_y_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_delta_y_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_heading_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_heading_pos1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_heading_pos1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_heading_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_heading_pos2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_heading_pos2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_init_heading_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_init_heading_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_init_heading_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_init_pos_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_init_pos_x_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_init_pos_x_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_init_pos_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_init_pos_y_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_init_pos_y_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_ti_stamp_nano_sec_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_ti_stamp_nano_sec_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_ti_stamp_nano_sec_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_ti_stamp_sec_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_ti_stamp_sec_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_ti_stamp_sec_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr03_ad_prim_pss_group_safe0_ub_is_in_range(uint8_t value);

/**
 * Pack message VIMMid5CanFdFr04.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_t *src_p,
    size_t size);

/**
 * Unpack message VIMMid5CanFdFr04.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_chks_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_chks_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_data_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_data_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_data_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_t_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_t_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_t_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_t_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_t_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_t_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_t_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_t_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_t_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_t_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_t_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_t_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_t_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_t_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_t_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_t_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_t_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_t_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_x_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_x_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_x_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_x_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_x_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_x_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_x_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_x_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_x_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_x_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_x_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_x_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_x_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_x_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_x_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_x_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_x_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_x_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_y_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_y_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_y_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_y_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_y_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_y_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_y_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_y_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_y_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_y_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_y_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_y_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_y_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_y_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_y_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_y_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_y_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_delta_y_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_heading_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_heading_pos1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_heading_pos1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_heading_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_heading_pos2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_heading_pos2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_heading_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_heading_pos3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_heading_pos3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_heading_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_heading_pos4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_heading_pos4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_heading_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_heading_pos5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_heading_pos5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_heading_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_heading_pos6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_heading_pos6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_traject_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_traject_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_traject_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr04_ad_prim_pss_group_safe1_ub_is_in_range(uint8_t value);

/**
 * Pack message VIMMid5CanFdFr05.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_t *src_p,
    size_t size);

/**
 * Unpack message VIMMid5CanFdFr05.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_chks_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_chks_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_data_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_data_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_data_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_t_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_t_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_t_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_t_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_t_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_t_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_t_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_t_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_t_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_t_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_t_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_t_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_t_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_t_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_t_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_t_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_t_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_t_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_x_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_x_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_x_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_x_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_x_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_x_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_x_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_x_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_x_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_x_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_x_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_x_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_x_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_x_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_x_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_x_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_x_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_x_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_y_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_y_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_y_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_y_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_y_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_y_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_y_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_y_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_y_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_y_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_y_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_y_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_y_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_y_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_y_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_y_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_y_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_delta_y_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_heading_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_heading_pos1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_heading_pos1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_heading_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_heading_pos2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_heading_pos2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_heading_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_heading_pos3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_heading_pos3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_heading_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_heading_pos4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_heading_pos4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_heading_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_heading_pos5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_heading_pos5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_heading_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_heading_pos6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_heading_pos6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_traject_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_traject_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_traject_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr05_ad_prim_pss_group_safe2_ub_is_in_range(uint8_t value);

/**
 * Pack message VIMMid5CanFdFr06.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_t *src_p,
    size_t size);

/**
 * Unpack message VIMMid5CanFdFr06.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_chks_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_chks_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_data_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_data_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_data_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_t_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_t_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_t_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_t_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_t_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_t_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_t_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_t_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_t_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_t_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_t_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_t_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_t_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_t_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_t_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_t_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_t_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_t_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_x_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_x_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_x_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_x_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_x_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_x_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_x_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_x_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_x_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_x_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_x_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_x_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_x_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_x_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_x_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_x_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_x_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_x_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_y_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_y_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_y_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_y_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_y_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_y_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_y_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_y_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_y_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_y_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_y_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_y_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_y_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_y_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_y_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_y_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_y_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_delta_y_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_heading_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_heading_pos1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_heading_pos1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_heading_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_heading_pos2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_heading_pos2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_heading_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_heading_pos3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_heading_pos3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_heading_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_heading_pos4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_heading_pos4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_heading_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_heading_pos5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_heading_pos5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_heading_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_heading_pos6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_heading_pos6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_traject_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_traject_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_traject_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr06_ad_prim_pss_group_safe3_ub_is_in_range(uint8_t value);

/**
 * Pack message VIMMid5CanFdFr07.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_t *src_p,
    size_t size);

/**
 * Unpack message VIMMid5CanFdFr07.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_chks_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_chks_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_data_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_data_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_data_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_t_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_t_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_t_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_t_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_t_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_t_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_t_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_t_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_t_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_t_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_t_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_t_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_t_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_t_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_t_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_t_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_t_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_t_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_x_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_x_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_x_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_x_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_x_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_x_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_x_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_x_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_x_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_x_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_x_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_x_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_x_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_x_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_x_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_x_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_x_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_x_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_y_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_y_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_y_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_y_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_y_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_y_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_y_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_y_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_y_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_y_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_y_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_y_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_y_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_y_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_y_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_y_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_y_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_delta_y_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_heading_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_heading_pos1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_heading_pos1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_heading_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_heading_pos2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_heading_pos2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_heading_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_heading_pos3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_heading_pos3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_heading_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_heading_pos4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_heading_pos4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_heading_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_heading_pos5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_heading_pos5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_heading_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_heading_pos6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_heading_pos6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_traject_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_traject_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_traject_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr07_ad_prim_pss_group_safe4_ub_is_in_range(uint8_t value);

/**
 * Pack message VIMMid5CanFdFr08.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_t *src_p,
    size_t size);

/**
 * Unpack message VIMMid5CanFdFr08.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_chks_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_chks_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_data_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_data_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_data_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_t_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_t_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_t_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_t_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_t_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_t_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_t_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_t_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_t_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_t_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_t_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_t_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_t_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_t_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_t_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_t_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_t_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_t_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_x_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_x_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_x_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_x_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_x_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_x_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_x_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_x_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_x_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_x_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_x_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_x_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_x_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_x_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_x_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_x_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_x_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_x_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_y_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_y_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_y_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_y_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_y_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_y_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_y_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_y_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_y_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_y_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_y_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_y_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_y_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_y_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_y_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_y_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_y_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_delta_y_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_heading_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_heading_pos1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_heading_pos1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_heading_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_heading_pos2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_heading_pos2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_heading_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_heading_pos3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_heading_pos3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_heading_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_heading_pos4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_heading_pos4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_heading_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_heading_pos5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_heading_pos5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_heading_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_heading_pos6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_heading_pos6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_traject_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_traject_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_traject_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr08_ad_prim_pss_group_safe5_ub_is_in_range(uint8_t value);

/**
 * Pack message VIMMid5CanFdFr09.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_t *src_p,
    size_t size);

/**
 * Unpack message VIMMid5CanFdFr09.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_chks_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_chks_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_data_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_data_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_data_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_t_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_t_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_t_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_t_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_t_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_t_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_t_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_t_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_t_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_t_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_t_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_t_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_t_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_t_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_t_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_t_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_t_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_t_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_x_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_x_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_x_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_x_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_x_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_x_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_x_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_x_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_x_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_x_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_x_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_x_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_x_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_x_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_x_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_x_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_x_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_x_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_y_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_y_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_y_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_y_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_y_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_y_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_y_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_y_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_y_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_y_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_y_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_y_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_y_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_y_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_y_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_y_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_y_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_delta_y_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_heading_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_heading_pos1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_heading_pos1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_heading_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_heading_pos2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_heading_pos2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_heading_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_heading_pos3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_heading_pos3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_heading_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_heading_pos4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_heading_pos4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_heading_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_heading_pos5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_heading_pos5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_heading_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_heading_pos6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_heading_pos6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_traject_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_traject_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_traject_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr09_ad_prim_pss_group_safe6_ub_is_in_range(uint8_t value);

/**
 * Pack message VIMMid5CanFdFr10.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_t *src_p,
    size_t size);

/**
 * Unpack message VIMMid5CanFdFr10.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_chks_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_chks_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_data_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_data_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_data_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_t_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_t_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_t_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_t_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_t_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_t_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_t_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_t_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_t_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_t_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_t_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_t_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_t_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_t_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_t_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_t_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_t_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_t_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_x_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_x_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_x_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_x_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_x_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_x_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_x_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_x_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_x_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_x_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_x_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_x_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_x_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_x_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_x_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_x_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_x_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_x_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_y_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_y_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_y_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_y_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_y_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_y_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_y_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_y_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_y_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_y_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_y_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_y_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_y_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_y_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_y_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_y_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_y_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_delta_y_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_heading_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_heading_pos1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_heading_pos1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_heading_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_heading_pos2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_heading_pos2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_heading_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_heading_pos3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_heading_pos3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_heading_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_heading_pos4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_heading_pos4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_heading_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_heading_pos5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_heading_pos5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_heading_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_heading_pos6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_heading_pos6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_traject_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_traject_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_traject_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr10_ad_prim_pss_group_safe7_ub_is_in_range(uint8_t value);

/**
 * Pack message VIMMid5CanFdFr11.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_t *src_p,
    size_t size);

/**
 * Unpack message VIMMid5CanFdFr11.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_chks_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_chks_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_data_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_data_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_data_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_t_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_t_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_t_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_t_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_t_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_t_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_t_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_t_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_t_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_t_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_t_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_t_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_t_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_t_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_t_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_t_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_t_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_t_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_x_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_x_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_x_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_x_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_x_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_x_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_x_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_x_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_x_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_x_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_x_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_x_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_x_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_x_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_x_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_x_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_x_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_x_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_y_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_y_pos1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_y_pos1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_y_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_y_pos2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_y_pos2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_y_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_y_pos3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_y_pos3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_y_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_y_pos4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_y_pos4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_y_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_y_pos5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_y_pos5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_y_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_y_pos6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_delta_y_pos6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_heading_pos1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_heading_pos1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_heading_pos1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_heading_pos2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_heading_pos2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_heading_pos2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_heading_pos3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_heading_pos3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_heading_pos3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_heading_pos4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_heading_pos4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_heading_pos4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_heading_pos5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_heading_pos5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_heading_pos5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_heading_pos6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_heading_pos6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_heading_pos6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_traject_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_traject_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_traject_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr11_ad_prim_pss_group_safe8_ub_is_in_range(uint8_t value);

/**
 * Pack message VIMMid5CanFdFr12.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr12_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr12_t *src_p,
    size_t size);

/**
 * Unpack message VIMMid5CanFdFr12.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr12_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr12_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr12_ad_prim_whl_ag_req_group_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr12_ad_prim_whl_ag_req_group_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr12_ad_prim_whl_ag_req_group_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr12_ad_prim_whl_ag_req_group_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr12_ad_prim_whl_ag_req_group_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr12_ad_prim_whl_ag_req_group_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr12_ad_prim_whl_ag_req_group_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr12_ad_prim_whl_ag_req_group_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr12_ad_prim_whl_ag_req_group_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr12_ad_prim_whl_ag_req_group_safe_whl_ag_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr12_ad_prim_whl_ag_req_group_safe_whl_ag_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr12_ad_prim_whl_ag_req_group_safe_whl_ag_req_is_in_range(uint16_t value);

/**
 * Pack message VIMMid5CanFdFr13.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_t *src_p,
    size_t size);

/**
 * Unpack message VIMMid5CanFdFr13.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_sds_flt_mgr_sts_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_sds_flt_mgr_sts_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_sds_flt_mgr_sts_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_ad_prim_safe_stop_req_safe_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_ad_prim_safe_stop_req_safe_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_ad_prim_safe_stop_req_safe_ub_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_ad_prim_safe_stop_req_safe_safe_stop_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_ad_prim_safe_stop_req_safe_safe_stop_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_ad_prim_safe_stop_req_safe_safe_stop_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_ad_prim_safe_stop_req_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_ad_prim_safe_stop_req_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_ad_prim_safe_stop_req_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_ad_prim_safe_stop_req_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_ad_prim_safe_stop_req_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_ad_prim_safe_stop_req_safe_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_sds_flt_mgr_sts_safe_sds_flt_mgr_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_sds_flt_mgr_sts_safe_sds_flt_mgr_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_sds_flt_mgr_sts_safe_sds_flt_mgr_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_sds_flt_mgr_sts_safe_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_sds_flt_mgr_sts_safe_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_sds_flt_mgr_sts_safe_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_sds_flt_mgr_sts_safe_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_sds_flt_mgr_sts_safe_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_fr13_sds_flt_mgr_sts_safe_chks_is_in_range(uint8_t value);

/**
 * Pack message VimMid5CanFdTimeSynchFr.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_time_synch_fr_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_time_synch_fr_t *src_p,
    size_t size);

/**
 * Unpack message VimMid5CanFdTimeSynchFr.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_time_synch_fr_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_mid5_can_fd_time_synch_fr_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message VIMPrototypeMid5CanFdFr13.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_prototype_mid5_can_fd_fr13_pack(
    uint8_t *dst_p,
    const struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_prototype_mid5_can_fd_fr13_t *src_p,
    size_t size);

/**
 * Unpack message VIMPrototypeMid5CanFdFr13.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_prototype_mid5_can_fd_fr13_unpack(
    struct spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_prototype_mid5_can_fd_fr13_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_prototype_mid5_can_fd_fr13_prim_mon_ti_sync_msg_ti_stamp_nano_sec_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_prototype_mid5_can_fd_fr13_prim_mon_ti_sync_msg_ti_stamp_nano_sec_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_prototype_mid5_can_fd_fr13_prim_mon_ti_sync_msg_ti_stamp_nano_sec_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_prototype_mid5_can_fd_fr13_prim_mon_ti_sync_msg_ti_stamp_sec_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_prototype_mid5_can_fd_fr13_prim_mon_ti_sync_msg_ti_stamp_sec_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_prototype_mid5_can_fd_fr13_prim_mon_ti_sync_msg_ti_stamp_sec_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_prototype_mid5_can_fd_fr13_prim_mon_ti_sync_msg_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_prototype_mid5_can_fd_fr13_prim_mon_ti_sync_msg_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_prototype_mid5_can_fd_fr13_prim_mon_ti_sync_msg_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_prototype_mid5_can_fd_fr13_prim_mon_ti_sync_msg_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_prototype_mid5_can_fd_fr13_prim_mon_ti_sync_msg_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_prototype_mid5_can_fd_fr13_prim_mon_ti_sync_msg_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_prototype_mid5_can_fd_fr13_prim_mon_ti_sync_msg_ub_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_prototype_mid5_can_fd_fr13_prim_mon_ti_sync_msg_ub_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spa4710_configurations_spa3_ad_mid5_canfd_cfg_210226_prototype_vim_prototype_mid5_can_fd_fr13_prim_mon_ti_sync_msg_ub_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
